<template>
  <div id="app">
    <el-container style="height: 100vh;">
      <!-- 顶部导航栏 -->
      <el-header class="header">
        <div class="header-left">
          <h2>🍎 Apple Bot System</h2>
        </div>
        <div class="header-right">
          <div class="status-indicators">
            <el-badge :value="pendingTasks.length" type="info" :hidden="pendingTasks.length === 0">
              <el-button size="small" disabled>
                ⏳ 等待
              </el-button>
            </el-badge>

            <el-badge :value="runningTasks.length" type="warning" :hidden="runningTasks.length === 0">
              <el-button size="small" disabled>
                🏃 运行
              </el-button>
            </el-badge>

            <el-badge :value="systemStatus.active_tasks" type="primary" class="status-badge">
              <el-button
                :type="isConnected ? 'success' : 'danger'"
                size="small"
                circle
              >
                {{ isConnected ? '✓' : '✗' }}
              </el-button>
            </el-badge>

            <!-- 🚀 实时监控状态 -->
            <div class="sync-status" v-if="isConnected">
              <span class="sync-indicator">🔄</span>
              <span class="sync-text">WebSocket</span>
            </div>

            <!-- 智能轮询状态 -->
            <div class="polling-status" v-if="isRealTimeActive">
              <span class="polling-indicator">📡</span>
              <span class="polling-text">实时监控</span>
            </div>

            <!-- 活跃任务数量 -->
            <div class="active-tasks" v-if="getActiveTasks().length > 0">
              <span class="active-indicator">⚡</span>
              <span class="active-text">{{ getActiveTasks().length }}活跃</span>
            </div>
          </div>

          <el-button
            type="success"
            @click="startAllTasks"
            :disabled="!hasExecutableTasks"
            size="small"
          >
            🚀 一键执行所有任务
          </el-button>

          <el-button
            type="info"
            @click="manualRefresh"
            size="small"
            :loading="isRefreshing"
          >
            🔄 {{ isRefreshing ? '刷新中...' : '刷新' }}
          </el-button>

          <el-button type="primary" @click="openCreateDialog">
            创建任务
          </el-button>
        </div>
      </el-header>

      <el-container>
        <!-- 侧边栏 -->
        <el-aside width="220px" class="sidebar">
          <el-menu
            v-model:default-active="currentProduct"
            class="menu"
            @select="switchProduct"
            mode="vertical"
            :unique-opened="false"
          >
            <el-menu-item index="iphone">
              <span>📱 iPhone</span>
            </el-menu-item>
            <el-menu-item index="mac">
              <span>💻 Mac</span>
            </el-menu-item>
            <el-menu-item index="ipad">
              <span>📱 iPad</span>
            </el-menu-item>
            <el-menu-item index="watch">
              <span>⌚ Apple Watch</span>
            </el-menu-item>
            <el-divider style="margin: 10px 0;"></el-divider>
            <el-menu-item index="all-tasks">
              <span>📋 所有任务</span>
            </el-menu-item>
            <el-divider style="margin: 10px 0;"></el-divider>
            <el-menu-item index="accounts">
              <span>👤 账号管理</span>
            </el-menu-item>
            <el-menu-item index="gift-cards">
              <span>🎁 礼品卡管理</span>
            </el-menu-item>
            <el-menu-item index="ip-pool">
              <span>🌐 IP池管理</span>
            </el-menu-item>
          </el-menu>
        </el-aside>

        <!-- 主内容区 -->
        <el-main class="main-content">
          <!-- iPhone 产品页面 -->
          <div v-if="currentProduct === 'iphone'" class="product-section">
            <div class="section-header">
              <h2>📱 iPhone 自动化任务</h2>
              <el-button type="primary" @click="openCreateDialog">
                创建 iPhone 任务
              </el-button>
            </div>

            <!-- 任务统计 -->
            <div class="stats-row">
              <el-card class="stat-card">
                <div class="stat-content">
                  <div class="stat-number">{{ getTasksByProduct('iphone').length }}</div>
                  <div class="stat-label">iPhone任务</div>
                </div>
              </el-card>
              <el-card class="stat-card">
                <div class="stat-content">
                  <div class="stat-number">{{ tasks.length }}</div>
                  <div class="stat-label">所有任务</div>
                </div>
              </el-card>
              <el-card class="stat-card">
                <div class="stat-content">
                  <div class="stat-number">{{ getTasksByProduct('iphone').filter(t => t.status === 'running').length }}</div>
                  <div class="stat-label">运行中</div>
                </div>
              </el-card>
              <el-card class="stat-card">
                <div class="stat-content">
                  <div class="stat-number">{{ getTasksByProduct('iphone').filter(t => t.status === 'completed').length }}</div>
                  <div class="stat-label">已完成</div>
                </div>
              </el-card>
              <el-card class="stat-card">
                <div class="stat-content">
                  <div class="stat-number">{{ getTasksByProduct('iphone').filter(t => t.status === 'pending').length }}</div>
                  <div class="stat-label">等待中</div>
                </div>
              </el-card>
            </div>

            <!-- 🚀 页签切换 -->
            <el-tabs v-model="activeTab" class="task-tabs" @tab-click="handleTabClick">
              <el-tab-pane label="📱 任务创建" name="create">
                <!-- 原有的任务网格内容 -->
                <div class="tab-content">
                  <!-- 任务网格 -->
            <div v-if="getTasksByProduct('iphone').length > 0" class="tasks-grid">
              <el-card
                v-for="task in getTasksByProduct('iphone')"
                :key="task.id"
                class="task-card"
                shadow="hover"
              >
                <template #header>
                  <div class="card-header">
                    <span class="task-name">{{ task.config.name }}</span>
                    <el-tag :type="getStatusType(task.status)" size="small">
                      {{ getStatusText(task.status) }}
                    </el-tag>
                  </div>
                </template>

                <div class="task-details">
                  <p><strong>Apple ID:</strong> {{ task.config.account_config?.email || 'N/A' }}</p>
                  <p><strong>型号:</strong> {{ task.config.product_config?.model || 'N/A' }}</p>
                  <p><strong>存储:</strong> {{ task.config.product_config?.storage || 'N/A' }}</p>
                  <p><strong>颜色:</strong> {{ task.config.product_config?.finish || 'N/A' }}</p>

                  <!-- 当前步骤显示 -->
                  <div v-if="isTaskActive(task) && task.current_step" class="current-step">
                    <p><strong>当前步骤:</strong>
                      <el-tag :type="getStepTagType(task.current_step)" size="small">
                        {{ formatStepName(task.current_step) }}
                      </el-tag>
                    </p>
                  </div>

                  <!-- 实时进度条 -->
                  <el-progress
                    :percentage="Math.round(task.progress || 0)"
                    :status="task.status === 'completed' ? 'success' :
                            task.status === 'failed' ? 'exception' : ''"
                    :stroke-width="8"
                    style="margin: 10px 0;"
                    :show-text="true"
                    :format="(percentage) => getProgressText(task, percentage)"
                  />

                  <!-- 等待礼品卡输入提示 -->
                  <div v-if="task.status === 'waiting_gift_card_input'" class="gift-card-waiting">
                    <el-alert
                      title="等待礼品卡输入"
                      type="warning"
                      :closable="false"
                      show-icon
                    >
                      <template #default>
                        <p>任务已到达礼品卡输入页面，请在浏览器中手动输入礼品卡信息</p>
                      </template>
                    </el-alert>
                  </div>

                  <!-- 实时最新日志显示 -->
                  <div v-if="task.logs && task.logs.length > 0" class="latest-log">
                    <p class="log-text" :class="getLogLevelClass(getLatestLogLevel(task))">
                      <span style="margin-right: 8px;">{{ getLogIcon(getLatestLogLevel(task)) }}</span>
                      {{ getLatestLog(task) }}
                    </p>
                    <p class="log-time">{{ formatTime(getLatestLogTime(task)) }}</p>
                  </div>

                  <!-- 操作按钮 -->
                  <div class="task-actions">
                    <el-button
                      size="small"
                      @click="viewTaskDetail(task)"
                      type="primary"
                    >
                      查看详情
                    </el-button>
                    <el-button
                      size="small"
                      @click="startTask(task.id)"
                      :disabled="task.status === 'running'"
                      type="success"
                      v-if="task.status === 'pending'"
                    >
                      启动任务
                    </el-button>
                    <el-button
                      size="small"
                      @click="deleteTask(task.id)"
                      type="danger"
                    >
                      删除
                    </el-button>
                  </div>
                </div>
              </el-card>
            </div>

            <div v-else>
              <el-empty description="暂无 iPhone 任务" :image-size="100">
                <el-button type="primary" @click="openCreateDialog">
                  创建第一个 iPhone 任务
                </el-button>
              </el-empty>
            </div>
                </div>
              </el-tab-pane>

              <!-- 🚀 任务列表页签 -->
              <el-tab-pane label="📋 所有任务" name="list">
                <div class="task-list-content">
                  <!-- 搜索和筛选 -->
                  <div class="search-filter-bar">
                    <el-row :gutter="20">
                      <el-col :span="8">
                        <el-input
                          v-model="searchQuery"
                          placeholder="搜索任务名称、Apple ID..."
                          prefix-icon="Search"
                          clearable
                        />
                      </el-col>
                      <el-col :span="6">
                        <el-select v-model="statusFilter" placeholder="筛选状态" clearable>
                          <el-option label="全部状态" value="all" />
                          <el-option label="等待中" value="pending" />
                          <el-option label="运行中" value="running" />
                          <el-option label="已完成" value="completed" />
                          <el-option label="失败" value="failed" />
                          <el-option label="已取消" value="cancelled" />
                        </el-select>
                      </el-col>
                      <el-col :span="10">
                        <div class="filter-info">
                          <span>共 {{ filteredTasks.length }} 个任务</span>
                          <el-button @click="refreshTasks" size="small" :loading="loading">
                            刷新
                          </el-button>
                        </div>
                      </el-col>
                    </el-row>
                  </div>

                  <!-- 任务表格 -->
                  <el-table
                    :data="paginatedTasks"
                    style="width: 100%"
                    v-loading="loading"
                    @row-click="viewTaskDetail"
                    row-class-name="task-row"
                  >
                    <el-table-column prop="config.name" label="任务名称" width="200">
                      <template #default="scope">
                        <div class="task-name-cell">
                          <span class="task-name">{{ scope.row.config?.name || '未命名任务' }}</span>
                          <el-tag size="small" class="task-id">{{ scope.row.id.substring(0, 8) }}</el-tag>
                        </div>
                      </template>
                    </el-table-column>

                    <el-table-column prop="status" label="状态" width="120">
                      <template #default="scope">
                        <el-tag :type="getStatusType(scope.row.status)" size="small">
                          {{ getStatusText(scope.row.status) }}
                        </el-tag>
                      </template>
                    </el-table-column>

                    <el-table-column prop="progress" label="进度" width="150">
                      <template #default="scope">
                        <el-progress
                          :percentage="Math.round(scope.row.progress || 0)"
                          :status="getProgressStatus(scope.row.status)"
                          :stroke-width="8"
                        />
                      </template>
                    </el-table-column>

                    <el-table-column prop="current_step" label="当前步骤" width="150">
                      <template #default="scope">
                        <el-tag
                          v-if="scope.row.current_step"
                          :type="getStepTagType(scope.row.current_step)"
                          size="small"
                        >
                          {{ formatStepName(scope.row.current_step) }}
                        </el-tag>
                        <span v-else class="text-muted">-</span>
                      </template>
                    </el-table-column>

                    <el-table-column prop="config.account_config.email" label="Apple ID" width="180">
                      <template #default="scope">
                        {{ scope.row.config?.account_config?.email || '-' }}
                      </template>
                    </el-table-column>

                    <el-table-column prop="created_at" label="创建时间" width="160">
                      <template #default="scope">
                        {{ formatTime(scope.row.created_at) }}
                      </template>
                    </el-table-column>

                    <el-table-column prop="started_at" label="开始时间" width="160">
                      <template #default="scope">
                        {{ scope.row.started_at ? formatTime(scope.row.started_at) : '-' }}
                      </template>
                    </el-table-column>

                    <el-table-column prop="completed_at" label="完成时间" width="160">
                      <template #default="scope">
                        {{ scope.row.completed_at ? formatTime(scope.row.completed_at) : '-' }}
                      </template>
                    </el-table-column>

                    <el-table-column label="操作" width="250" fixed="right">
                      <template #default="scope">
                        <!-- 🎁 等待礼品卡输入状态的特殊操作 -->
                        <el-button
                          v-if="scope.row.status === 'waiting_gift_card_input'"
                          type="warning"
                          size="small"
                          @click.stop="openGiftCardInput(scope.row)"
                        >
                          填写卡号
                        </el-button>

                        <el-button
                          type="text"
                          size="small"
                          @click.stop="viewTaskDetail(scope.row)"
                        >
                          详情
                        </el-button>
                        <el-button
                          v-if="scope.row.status === 'pending'"
                          type="text"
                          size="small"
                          @click.stop="startTask(scope.row.id)"
                        >
                          启动
                        </el-button>
                        <el-button
                          v-if="['running', 'stage_1_product_config', 'stage_2_account_login', 'stage_3_address_phone', 'stage_4_gift_card'].includes(scope.row.status)"
                          type="text"
                          size="small"
                          @click.stop="cancelTask(scope.row.id)"
                        >
                          取消
                        </el-button>
                        <el-button
                          v-if="['completed', 'failed', 'cancelled'].includes(scope.row.status)"
                          type="text"
                          size="small"
                          @click.stop="deleteTask(scope.row.id)"
                          style="color: #f56c6c"
                        >
                          删除
                        </el-button>
                      </template>
                    </el-table-column>
                  </el-table>

                  <!-- 分页 -->
                  <div class="pagination-wrapper">
                    <el-pagination
                      v-model:current-page="currentPage"
                      v-model:page-size="pageSize"
                      :page-sizes="[10, 20, 50, 100]"
                      :total="filteredTasks.length"
                      layout="total, sizes, prev, pager, next, jumper"
                      @size-change="handleSizeChange"
                      @current-change="handleCurrentChange"
                    />
                  </div>
                </div>
              </el-tab-pane>
            </el-tabs>
          </div>

          <!-- Mac 产品页面 -->
          <div v-else-if="currentProduct === 'mac'" class="product-section">
            <div class="section-header">
              <h2>💻 Mac 自动化任务</h2>
              <el-button type="primary" @click="openCreateDialog">
                创建 Mac 任务
              </el-button>
            </div>
            <el-alert
              title="Mac 产品支持即将上线"
              type="info"
              description="Mac 产品的自动化购买功能正在开发中，敬请期待！"
              show-icon
              :closable="false"
            />
          </div>

          <!-- iPad 产品页面 -->
          <div v-else-if="currentProduct === 'ipad'" class="product-section">
            <div class="section-header">
              <h2>📱 iPad 自动化任务</h2>
              <el-button type="primary" @click="openCreateDialog">
                创建 iPad 任务
              </el-button>
            </div>
            <el-alert
              title="iPad 产品支持即将上线"
              type="info"
              description="iPad 产品的自动化购买功能正在开发中，敬请期待！"
              show-icon
              :closable="false"
            />
          </div>

          <!-- Apple Watch 产品页面 -->
          <div v-else-if="currentProduct === 'watch'" class="product-section">
            <div class="section-header">
              <h2>⌚ Apple Watch 自动化任务</h2>
              <el-button type="primary" @click="openCreateDialog">
                创建 Watch 任务
              </el-button>
            </div>
            <el-alert
              title="Apple Watch 产品支持即将上线"
              type="info"
              description="Apple Watch 产品的自动化购买功能正在开发中，敬请期待！"
              show-icon
              :closable="false"
            />
          </div>

          <!-- 所有任务视图 -->
          <div v-else-if="currentProduct === 'all-tasks'" class="product-section">
            <div class="section-header">
              <h2>📋 所有任务总览</h2>
            </div>

            <!-- 任务统计 -->
            <div class="stats-row">
              <el-card class="stat-card">
                <div class="stat-content">
                  <div class="stat-number">{{ tasks.length }}</div>
                  <div class="stat-label">总任务</div>
                </div>
              </el-card>
              <el-card class="stat-card">
                <div class="stat-content">
                  <div class="stat-number">{{ tasks.filter(t => ['running', 'stage_1_product_config', 'stage_2_account_login', 'stage_3_address_phone', 'stage_4_gift_card'].includes(t.status)).length }}</div>
                  <div class="stat-label">运行中</div>
                </div>
              </el-card>
              <el-card class="stat-card">
                <div class="stat-content">
                  <div class="stat-number">{{ tasks.filter(t => t.status === 'waiting_gift_card_input').length }}</div>
                  <div class="stat-label">等待输入</div>
                </div>
              </el-card>
              <el-card class="stat-card">
                <div class="stat-content">
                  <div class="stat-number">{{ tasks.filter(t => t.status === 'completed').length }}</div>
                  <div class="stat-label">已完成</div>
                </div>
              </el-card>
              <el-card class="stat-card">
                <div class="stat-content">
                  <div class="stat-number">{{ tasks.filter(t => t.status === 'failed').length }}</div>
                  <div class="stat-label">失败</div>
                </div>
              </el-card>
            </div>

            <!-- 任务表格 -->
            <div v-if="tasks.length > 0" class="tasks-table">
              <el-table :data="tasks" style="width: 100%" stripe>
                <el-table-column prop="config.name" label="任务名称" width="150" />
                <el-table-column label="产品" width="120">
                  <template #default="scope">
                    <el-tag v-if="scope.row.config?.url?.includes('iphone')" type="primary">iPhone</el-tag>
                    <el-tag v-else-if="scope.row.config?.url?.includes('mac')" type="success">Mac</el-tag>
                    <el-tag v-else-if="scope.row.config?.url?.includes('ipad')" type="warning">iPad</el-tag>
                    <el-tag v-else-if="scope.row.config?.url?.includes('watch')" type="info">Watch</el-tag>
                    <el-tag v-else>未知</el-tag>
                  </template>
                </el-table-column>
                <el-table-column label="状态" width="120">
                  <template #default="scope">
                    <el-tag
                      :type="getStatusTagType(scope.row.status)"
                      effect="dark"
                    >
                      {{ getStatusDisplayName(scope.row.status) }}
                    </el-tag>
                  </template>
                </el-table-column>
                <el-table-column label="进度" width="120">
                  <template #default="scope">
                    <el-progress
                      :percentage="scope.row.progress || 0"
                      :status="scope.row.status === 'completed' ? 'success' : scope.row.status === 'failed' ? 'exception' : ''"
                      :show-text="false"
                    />
                    <span class="progress-text">{{ scope.row.progress || 0 }}%</span>
                  </template>
                </el-table-column>
                <el-table-column prop="created_at" label="创建时间" width="180">
                  <template #default="scope">
                    {{ formatTime(scope.row.created_at) }}
                  </template>
                </el-table-column>
                <el-table-column label="操作" width="200">
                  <template #default="scope">
                    <!-- 等待礼品卡输入状态的特殊操作 -->
                    <el-button
                      v-if="scope.row.status === 'waiting_gift_card_input'"
                      type="warning"
                      size="small"
                      @click="openGiftCardInput(scope.row)"
                    >
                      填写卡号
                    </el-button>

                    <!-- 其他状态的通用操作 -->
                    <el-button
                      v-if="scope.row.status === 'pending'"
                      type="primary"
                      size="small"
                      @click="startTask(scope.row.id)"
                    >
                      启动
                    </el-button>

                    <el-button
                      v-if="['running', 'stage_1_product_config', 'stage_2_account_login', 'stage_3_address_phone', 'stage_4_gift_card'].includes(scope.row.status)"
                      type="danger"
                      size="small"
                      @click="cancelTask(scope.row.id)"
                    >
                      取消
                    </el-button>

                    <el-button
                      size="small"
                      @click="viewTaskDetail(scope.row)"
                    >
                      详情
                    </el-button>

                    <el-button
                      v-if="['completed', 'failed', 'cancelled'].includes(scope.row.status)"
                      type="danger"
                      size="small"
                      @click="deleteTask(scope.row.id)"
                    >
                      删除
                    </el-button>
                  </template>
                </el-table-column>
              </el-table>
            </div>

            <div v-else>
              <el-empty description="暂无任务" :image-size="100" />
            </div>
          </div>

          <!-- 账号管理页面 -->
          <div v-else-if="currentProduct === 'accounts'" class="product-section">
            <div class="section-header">
              <h2>👤 账号管理</h2>
              <el-button type="primary" @click="showAddAccountDialog = true">添加账号</el-button>
            </div>

            <div v-if="accounts.length > 0">
              <el-table :data="accounts" style="width: 100%">
                <el-table-column prop="email" label="Apple ID" width="250" />
                <el-table-column prop="status" label="状态" width="120">
                  <template #default="scope">
                    <el-tag :type="scope.row.status === 'active' ? 'success' : 'danger'">
                      {{ scope.row.status === 'active' ? '正常' : '异常' }}
                    </el-tag>
                  </template>
                </el-table-column>
                <el-table-column prop="last_used" label="最后使用" width="180" />
                <el-table-column prop="created_at" label="添加时间" width="180" />
                <el-table-column label="操作">
                  <template #default="scope">
                    <el-button size="small" @click="testAccount(scope.row.id)">测试</el-button>
                    <el-button size="small" type="danger" @click="deleteAccount(scope.row.id)">删除</el-button>
                  </template>
                </el-table-column>
              </el-table>
            </div>

            <div v-else>
              <el-empty description="暂无账号" :image-size="100">
                <el-button type="primary" @click="showAddAccountDialog = true">添加第一个账号</el-button>
              </el-empty>
            </div>
          </div>

          <!-- 礼品卡管理页面 -->
          <div v-else-if="currentProduct === 'gift-cards'" class="product-section">
            <div class="section-header">
              <h2>🎁 礼品卡管理</h2>
              <div class="header-actions">
                <el-select
                  v-model="giftCardStatusFilter"
                  placeholder="筛选状态"
                  clearable
                  @change="() => {/* 状态筛选不需要刷新数据 */}"
                  style="width: 150px; margin-right: 10px;"
                >
                  <el-option
                    v-for="status in giftCardStatuses"
                    :key="status"
                    :label="status"
                    :value="status"
                  />
                </el-select>
                <el-button type="primary" @click="showAddGiftCardDialog = true">
                  添加礼品卡
                </el-button>
              </div>
            </div>

            <div v-if="giftCards.length > 0">
              <el-table :data="giftCards" style="width: 100%" stripe>
                <el-table-column prop="gift_card_number" label="礼品卡号" min-width="200" />
                <el-table-column label="状态" width="120">
                  <template #default="scope">
                    <el-tag :type="getGiftCardStatusType(scope.row.status)">
                      {{ scope.row.status }}
                    </el-tag>
                  </template>
                </el-table-column>
                <el-table-column prop="balance" label="余额" width="100">
                  <template #default="scope">
                    ${{ scope.row.balance || '0' }}
                  </template>
                </el-table-column>
                <el-table-column prop="notes" label="备注" min-width="150" />
                <el-table-column label="创建时间" width="180">
                  <template #default="scope">
                    {{ formatTime(scope.row.created_at) }}
                  </template>
                </el-table-column>
                <el-table-column label="操作" width="200" fixed="right">
                  <template #default="scope">
                    <el-button size="small" @click="editGiftCard(scope.row)">
                      编辑
                    </el-button>
                    <el-button size="small" type="danger" @click="deleteGiftCard(scope.row.id)">
                      删除
                    </el-button>
                  </template>
                </el-table-column>
              </el-table>
            </div>

            <div v-else>
              <el-empty description="暂无礼品卡" :image-size="100">
                <el-button type="primary" @click="showAddGiftCardDialog = true">
                  添加第一张礼品卡
                </el-button>
              </el-empty>
            </div>
          </div>

          <!-- IP池管理页面 -->
          <div v-else-if="currentProduct === 'ip-pool'" class="product-section">
            <div class="section-header">
              <h2>🌐 IP池管理</h2>
              <el-button type="primary">添加代理</el-button>
            </div>
            <el-empty description="暂无代理" :image-size="100" />
          </div>
        </el-main>
      </el-container>
    </el-container>

    <!-- 创建任务对话框 -->
    <el-dialog
      v-model="showCreateDialog"
      title="创建任务"
      width="600px"
    >
      <el-form :model="taskForm" label-width="100px">
        <el-form-item label="任务名称">
          <el-input v-model="taskForm.name" placeholder="请输入任务名称" />
        </el-form-item>

        <el-form-item label="产品URL">
          <el-input
            v-model="taskForm.url"
            placeholder="请输入Apple Store产品页面URL"
            type="textarea"
            :rows="2"
          />
        </el-form-item>

        <el-form-item label="iPhone型号">
          <el-select
            v-model="taskForm.selectedModel"
            placeholder="选择iPhone型号"
            @change="onModelChange"
          >
            <el-option
              v-for="(modelData, modelKey) in iphoneConfigs.models"
              :key="modelKey"
              :label="modelData.name"
              :value="modelKey"
            />
          </el-select>
        </el-form-item>

        <el-form-item label="尺寸" v-if="taskForm.selectedModel">
          <el-select
            v-model="taskForm.selectedSize"
            placeholder="选择尺寸"
            @change="onSizeChange"
          >
            <el-option
              v-for="(sizeData, sizeKey) in availableSizes"
              :key="sizeKey"
              :label="sizeData.name"
              :value="sizeKey"
            />
          </el-select>
        </el-form-item>

        <el-form-item label="存储容量" v-if="taskForm.selectedSize">
          <el-select
            v-model="taskForm.selectedStorage"
            placeholder="选择存储容量"
            @change="onStorageChange"
          >
            <el-option
              v-for="storage in availableStorages"
              :key="storage"
              :label="iphoneConfigs.storage_display_names[storage]"
              :value="storage"
            />
          </el-select>
        </el-form-item>

        <el-form-item label="颜色" v-if="taskForm.selectedStorage">
          <el-select
            v-model="taskForm.selectedColor"
            placeholder="选择颜色"
            @change="onColorChange"
          >
            <el-option
              v-for="color in availableColors"
              :key="color"
              :label="iphoneConfigs.color_display_names[color]"
              :value="color"
            />
          </el-select>
        </el-form-item>

        <el-form-item label="产品URL" prop="url">
          <el-input
            v-model="taskForm.url"
            placeholder="粘贴iPhone URL自动解析配置，或通过下方选择生成"
            type="textarea"
            :rows="2"
            clearable
            @blur="parseUrlIfNeeded"
          >
            <template #append>
              <el-button @click="parseUrl" type="primary" :loading="parsingUrl">
                解析
              </el-button>
            </template>
          </el-input>
        </el-form-item>

        <!-- 生成的URL显示 -->
        <el-form-item label="生成的URL" v-if="generatedUrl">
          <el-input
            v-model="generatedUrl"
            readonly
            type="textarea"
            :rows="2"
          >
            <template #append>
              <el-button @click="copyUrl" type="primary">复制</el-button>
            </template>
          </el-input>
        </el-form-item>

        <el-form-item label="Apple ID">
          <el-select v-model="taskForm.selectedAccount" placeholder="选择Apple ID账号">
            <el-option
              v-for="account in accounts"
              :key="account.id"
              :label="account.email"
              :value="account.id"
            />
          </el-select>
        </el-form-item>

        <el-form-item label="礼品卡">
          <el-select
            v-model="taskForm.selectedGiftCards"
            placeholder="选择礼品卡（可多选）"
            multiple
          >
            <el-option
              v-for="card in giftCards"
              :key="card.id"
              :label="`${card.number} (余额: $${card.balance})`"
              :value="card.id"
            />
          </el-select>
        </el-form-item>

        <el-form-item label="优先级">
          <el-slider
            v-model="taskForm.priority"
            :min="1"
            :max="5"
            :marks="{ 1: '低', 3: '中', 5: '高' }"
          />
        </el-form-item>
      </el-form>

      <template #footer>
        <el-button @click="showCreateDialog = false">取消</el-button>
        <el-button type="primary" @click="createTask">创建任务</el-button>
      </template>
    </el-dialog>

    <!-- 添加账号对话框 -->
    <el-dialog
      v-model="showAddAccountDialog"
      title="添加Apple ID账号"
      width="500px"
    >
      <el-form :model="accountForm" label-width="100px">
        <el-form-item label="Apple ID">
          <el-input v-model="accountForm.email" placeholder="请输入Apple ID邮箱" />
        </el-form-item>

        <el-form-item label="密码">
          <el-input
            v-model="accountForm.password"
            placeholder="请输入密码"
            type="password"
            show-password
          />
        </el-form-item>

        <el-form-item label="备注">
          <el-input
            v-model="accountForm.note"
            placeholder="可选：添加备注信息"
            type="textarea"
            :rows="2"
          />
        </el-form-item>
      </el-form>

      <template #footer>
        <el-button @click="showAddAccountDialog = false">取消</el-button>
        <el-button type="primary" @click="addAccount">添加账号</el-button>
      </template>
    </el-dialog>

    <!-- 添加礼品卡对话框 -->
    <el-dialog
      v-model="showAddGiftCardDialog"
      :title="editingGiftCard ? '编辑礼品卡' : '添加礼品卡'"
      width="500px"
    >
      <el-form :model="giftCardForm" label-width="100px">
        <el-form-item label="礼品卡号">
          <el-input
            v-model="giftCardForm.gift_card_number"
            placeholder="请输入礼品卡号"
            clearable
          />
        </el-form-item>

        <el-form-item label="状态">
          <el-select v-model="giftCardForm.status" style="width: 100%">
            <el-option
              v-for="status in giftCardStatuses"
              :key="status"
              :label="status"
              :value="status"
            />
          </el-select>
        </el-form-item>

        <el-form-item label="余额">
          <el-input
            v-model="giftCardForm.balance"
            placeholder="可选：输入余额金额"
            type="number"
          />
        </el-form-item>

        <el-form-item label="备注">
          <el-input
            v-model="giftCardForm.notes"
            placeholder="可选：添加备注信息"
            type="textarea"
            :rows="2"
          />
        </el-form-item>
      </el-form>

      <template #footer>
        <el-button @click="showAddGiftCardDialog = false; editingGiftCard = null">取消</el-button>
        <el-button type="primary" @click="addGiftCard">
          {{ editingGiftCard ? '更新' : '添加' }}
        </el-button>
      </template>
    </el-dialog>

    <!-- 任务详情对话框 -->
    <el-dialog
      v-model="showDetailDialog"
      title="任务详情"
      width="800px"
    >
      <div v-if="selectedTask">
        <el-descriptions :column="2" border>
          <el-descriptions-item label="任务名称">
            {{ selectedTask.config?.name || 'N/A' }}
          </el-descriptions-item>
          <el-descriptions-item label="状态">
            <el-tag :type="getStatusType(selectedTask.status)">
              {{ getStatusText(selectedTask.status) }}
            </el-tag>
          </el-descriptions-item>
          <el-descriptions-item label="Apple ID">
            {{ selectedTask.config?.account_config?.email || 'N/A' }}
          </el-descriptions-item>
          <el-descriptions-item label="进度">
            {{ Math.round(selectedTask.progress || 0) }}%
          </el-descriptions-item>
          <el-descriptions-item label="当前步骤" v-if="selectedTask.current_step">
            {{ formatStepName(selectedTask.current_step) }}
          </el-descriptions-item>
          <el-descriptions-item label="优先级">
            {{ selectedTask.config?.priority || 'N/A' }}
          </el-descriptions-item>
          <el-descriptions-item label="创建时间" span="2">
            {{ formatTime(selectedTask.created_at) }}
          </el-descriptions-item>
          <el-descriptions-item label="产品配置" span="2">
            <div v-if="selectedTask.config?.product_config">
              <p><strong>型号:</strong> {{ selectedTask.config.product_config.model_display_name || selectedTask.config.product_config.model }}</p>
              <p><strong>尺寸:</strong> {{ selectedTask.config.product_config.size_display_name || selectedTask.config.product_config.size }}</p>
              <p><strong>存储:</strong> {{ selectedTask.config.product_config.storage_display_name || selectedTask.config.product_config.storage }}</p>
              <p><strong>颜色:</strong> {{ selectedTask.config.product_config.finish_display_name || selectedTask.config.product_config.finish }}</p>
            </div>
          </el-descriptions-item>
          <el-descriptions-item label="产品URL" span="2">
            <el-link :href="selectedTask.config?.url" target="_blank" v-if="selectedTask.config?.url">
              {{ selectedTask.config.url }}
            </el-link>
            <span v-else>N/A</span>
          </el-descriptions-item>
          <el-descriptions-item label="礼品卡" span="2" v-if="selectedTask.config?.gift_cards && selectedTask.config.gift_cards.length > 0">
            <div>
              <el-tag
                v-for="card in selectedTask.config.gift_cards"
                :key="card.id"
                style="margin-right: 8px; margin-bottom: 4px;"
              >
                {{ card.number }} (余额: ${{ card.balance }})
              </el-tag>
            </div>
          </el-descriptions-item>
        </el-descriptions>

        <!-- 🚨 账号安全问题信息 -->
        <div v-if="selectedTask.security_issue" style="margin-top: 20px;">
          <h4>🚨 账号安全问题</h4>
          <el-alert
            :title="selectedTask.security_issue.lock_message ? '账号已被锁定' : '检测到账号安全问题'"
            type="error"
            :closable="false"
            show-icon
          >
            <template #default>
              <div class="security-issue-details">
                <div v-if="selectedTask.security_issue.lock_message" style="margin-bottom: 15px;">
                  <p><strong>锁定原因:</strong></p>
                  <div style="background: #fef0f0; padding: 10px; border-radius: 4px; margin: 5px 0;">
                    <code style="color: #f56c6c;">{{ selectedTask.security_issue.lock_message }}</code>
                  </div>
                </div>
                <p><strong>问题页面:</strong> {{ selectedTask.security_issue.page_title }}</p>
                <p><strong>当前URL:</strong></p>
                <el-link
                  :href="selectedTask.security_issue.current_url"
                  target="_blank"
                  type="primary"
                  style="font-size: 12px; word-break: break-all; margin-left: 10px;"
                >
                  {{ selectedTask.security_issue.current_url }}
                </el-link>
                <p style="margin-top: 10px;"><strong>发生时间:</strong> {{ formatTimestamp(selectedTask.security_issue.timestamp) }}</p>
                <p style="margin-top: 10px; color: #f56c6c;">
                  <el-icon><Warning /></el-icon>
                  {{ selectedTask.security_issue.lock_message
                     ? '该账号已被锁定，需要解锁后才能继续使用'
                     : '该账号可能需要额外验证或已被标记为异常，请检查账号状态' }}
                </p>
              </div>
            </template>
          </el-alert>
        </div>

        <div style="margin-top: 20px;">
          <h4>实时运行日志
            <el-tag v-if="selectedTask.logs" size="small" type="info">
              {{ selectedTask.logs.length }} 条
            </el-tag>
          </h4>
          <div class="log-container" ref="logContainer">
            <div
              v-if="selectedTask.logs && selectedTask.logs.length > 0"
              class="log-entries"
            >
              <div
                v-for="(log, index) in selectedTask.logs"
                :key="`${selectedTask.id}-${index}`"
                class="log-entry"
                :class="log.level || 'info'"
              >
                <span class="log-time">{{ formatTime(log.timestamp) }}</span>
                <span class="log-message">{{ log.message }}</span>
              </div>
            </div>
            <div v-else class="no-logs">
              暂无日志信息
            </div>
          </div>

          <!-- 自动滚动控制 -->
          <div style="margin-top: 10px; text-align: right;">
            <el-checkbox v-model="autoScrollLogs" size="small">
              自动滚动到最新日志
            </el-checkbox>
          </div>
        </div>
      </div>

      <template #footer>
        <el-button @click="showDetailDialog = false">关闭</el-button>
        <el-button
          type="primary"
          @click="startTask(selectedTask.id)"
          v-if="selectedTask && selectedTask.status === 'pending'"
        >
          启动任务
        </el-button>
        <el-button
          type="danger"
          @click="deleteTask(selectedTask.id); showDetailDialog = false"
          v-if="selectedTask"
        >
          删除任务
        </el-button>
      </template>
    </el-dialog>

    <!-- 🎁 礼品卡输入对话框 -->
    <el-dialog
      v-model="showGiftCardInputDialog"
      title="输入礼品卡信息"
      width="500px"
      :close-on-click-modal="false"
    >
      <div v-if="waitingGiftCardTask">
        <div class="gift-card-form">
          <h4>任务信息</h4>
          <p><strong>任务名称：</strong>{{ waitingGiftCardTask.config?.name }}</p>
          <p><strong>当前状态：</strong>等待输入礼品卡</p>

          <el-divider></el-divider>

          <h4>礼品卡信息</h4>
          <el-form :model="taskGiftCardForm" label-width="120px" ref="giftCardFormRef">
            <el-form-item
              label="礼品卡号码"
              required
              :rules="[
                { required: true, message: '请输入礼品卡号码', trigger: 'blur' },
                { pattern: /^[A-Z0-9]{16}$/, message: '礼品卡号码必须是16位字母数字组合', trigger: 'blur' }
              ]"
              prop="code"
            >
              <el-input
                v-model="taskGiftCardForm.code"
                placeholder="请输入16位礼品卡号码（如：X7YVTGTLVR8FJ54Z）"
                maxlength="16"
                show-word-limit
                @input="formatGiftCardCode"
                style="text-transform: uppercase;"
              />
              <div class="form-help-text">
                <small>格式：16位字母数字组合，自动转换为大写</small>
              </div>
            </el-form-item>
            <el-form-item label="备注">
              <el-input
                v-model="taskGiftCardForm.note"
                type="textarea"
                placeholder="可选备注信息"
                :rows="2"
                maxlength="100"
                show-word-limit
              />
            </el-form-item>
          </el-form>
        </div>
      </div>

      <template #footer>
        <el-button @click="cancelGiftCardInput">取消</el-button>
        <el-button
          type="primary"
          @click="submitGiftCardInput"
          :disabled="!taskGiftCardForm.code"
        >
          提交并继续任务
        </el-button>
      </template>
    </el-dialog>
  </div>
</template>

<script setup>
import { ref, reactive, onMounted, onUnmounted, computed, watch } from 'vue'
import { ElMessage, ElMessageBox } from 'element-plus'
import {
  Document,
  Clock,
  Loading,
  Check,
  Close,
  CircleClose,
  User,
  CreditCard,
  Odometer,
  List,
  Search
} from '@element-plus/icons-vue'
import axios from 'axios'
import io from 'socket.io-client'

// 响应式数据
const currentProduct = ref('iphone')
const showCreateDialog = ref(false)
const showDetailDialog = ref(false)
const showAddAccountDialog = ref(false)
const showAddGiftCardDialog = ref(false)
const showGiftCardInputDialog = ref(false)
const waitingGiftCardTask = ref(null)
const taskGiftCardForm = ref({
  code: '',
  note: ''
})
const selectedTask = ref(null)
const autoScrollLogs = ref(true)
const logContainer = ref(null)
const isRefreshing = ref(false)

const isConnected = ref(false)
const hasInitialLoad = ref(false) // 标记是否已经初始加载过

// 🚀 防抖相关
let updateTasksDebounceTimer = null
const DEBOUNCE_DELAY = 100 // 100ms防抖延迟

// 🚀 实时监控相关
const lastUpdateTime = ref(Date.now())
const isRealTimeActive = ref(false)
let heartbeatTimer = null
let smartPollingTimer = null
let fullPollingTimer = null
const HEARTBEAT_INTERVAL = 30000 // 30秒心跳
const SMART_POLLING_INTERVAL = 2000 // 🚀 2秒智能轮询
const FULL_POLLING_INTERVAL = 30000 // 🚀 30秒全量轮询
const socket = ref(null)
const tasks = ref([])
const accounts = ref([])
const giftCards = ref([])
const giftCardStatuses = ref(['有额度', '0余额', '非本国卡', '被充值'])
const giftCardStatusFilter = ref('')
const editingGiftCard = ref(null)
const systemStatus = ref({
  total_tasks: 0,
  active_tasks: 0,
  max_concurrent: 3
})

// 🚀 页签相关
const activeTab = ref('create') // iPhone页面内的页签
const searchQuery = ref('')
const statusFilter = ref('all')

// 🚀 分页相关
const currentPage = ref(1)
const pageSize = ref(20)
const loading = ref(false)

// 🚀 任务统计
const taskStats = ref({
  total: 0,
  pending: 0,
  running: 0,
  completed: 0,
  failed: 0,
  cancelled: 0
})

// 任务表单数据
const taskForm = reactive({
  name: '',
  url: '',
  selectedAccount: null,
  selectedGiftCards: [],
  selectedModel: '',
  selectedSize: '',
  selectedStorage: '',
  selectedColor: '',
  priority: 2,
  product: 'iphone'
})

// 账号表单数据
const accountForm = reactive({
  email: '',
  password: '',
  note: ''
})

// 礼品卡表单数据
const giftCardForm = reactive({
  gift_card_number: '',
  status: '有额度',
  balance: '',
  notes: ''
})

// 计算属性
const pendingTasks = computed(() => {
  if (!Array.isArray(tasks.value)) return []
  return tasks.value.filter(t => t.status === 'pending')
})
const runningTasks = computed(() => {
  if (!Array.isArray(tasks.value)) return []
  return tasks.value.filter(t => t.status === 'running')
})
const hasExecutableTasks = computed(() => pendingTasks.value.length > 0)

// 🚀 任务筛选和分页计算属性
const filteredTasks = computed(() => {
  if (!Array.isArray(tasks.value)) return []

  let filtered = [...tasks.value]

  // 按状态筛选
  if (statusFilter.value && statusFilter.value !== 'all') {
    filtered = filtered.filter(task => task.status === statusFilter.value)
  }

  // 按搜索关键词筛选
  if (searchQuery.value) {
    const query = searchQuery.value.toLowerCase()
    filtered = filtered.filter(task =>
      (task.config?.name || '').toLowerCase().includes(query) ||
      (task.config?.account_config?.email || '').toLowerCase().includes(query) ||
      task.id.toLowerCase().includes(query)
    )
  }

  // 按创建时间排序（最新的在前）
  filtered.sort((a, b) => new Date(b.created_at) - new Date(a.created_at))

  return filtered
})

const paginatedTasks = computed(() => {
  const start = (currentPage.value - 1) * pageSize.value
  const end = start + pageSize.value
  return filteredTasks.value.slice(start, end)
})

// 🚀 任务统计计算属性
const taskStatsComputed = computed(() => {
  if (!Array.isArray(tasks.value)) {
    return { total: 0, pending: 0, running: 0, completed: 0, failed: 0, cancelled: 0 }
  }

  const stats = { total: 0, pending: 0, running: 0, completed: 0, failed: 0, cancelled: 0 }

  tasks.value.forEach(task => {
    stats.total++
    if (task.status in stats) {
      stats[task.status]++
    }
  })

  return stats
})

// iPhone配置相关计算属性
const availableSizes = computed(() => {
  if (!taskForm.selectedModel || !iphoneConfigs.models[taskForm.selectedModel]) {
    return {}
  }
  return iphoneConfigs.models[taskForm.selectedModel].sizes || {}
})

const availableStorages = computed(() => {
  if (!taskForm.selectedModel || !taskForm.selectedSize) {
    return []
  }
  const sizeData = iphoneConfigs.models[taskForm.selectedModel]?.sizes[taskForm.selectedSize]
  return sizeData?.storages || []
})

const availableColors = computed(() => {
  if (!taskForm.selectedModel || !taskForm.selectedSize) {
    return []
  }
  const sizeData = iphoneConfigs.models[taskForm.selectedModel]?.sizes[taskForm.selectedSize]
  return sizeData?.colors || []
})

// iPhone 配置选项 - 从后端动态加载
const iphoneConfigs = reactive({
  models: {},
  color_display_names: {},
  storage_display_names: {}
})

// 生成的URL和验证状态
const generatedUrl = ref('')
const parsingUrl = ref(false)
const isValidUrl = ref(true)

// 初始化 WebSocket 连接
const initWebSocket = () => {
  console.log('🔌 尝试初始化WebSocket连接')

  try {
    socket.value = io('http://localhost:5001', {
      timeout: 5000,
      autoConnect: true
    })

    socket.value.on('connect', () => {
      isConnected.value = true
      console.log('✅ WebSocket已连接')
      ElMessage.success('WebSocket连接成功')

      // 🚀 重连后立即请求当前状态
      console.log('🔄 WebSocket重连，请求最新状态...')

      // 🚀 每次连接都刷新数据，确保同步
      console.log('📋 WebSocket连接，刷新所有数据...')
      refreshTasks()
      refreshAccounts()
      refreshGiftCards()
      hasInitialLoad.value = true

      // 🎁 检查是否有等待礼品卡输入的任务
      setTimeout(() => {
        checkForWaitingGiftCardTasks()
      }, 1000) // 等待任务数据加载完成

      // 🚀 启动智能轮询作为WebSocket的补充
      console.log('🔄 启动智能轮询监控')
      startSmartPolling()
    })

    socket.value.on('disconnect', () => {
      isConnected.value = false
      console.log('❌ WebSocket连接断开')
      ElMessage.warning('WebSocket连接断开')

      // WebSocket断开时，智能轮询继续工作作为备用
      console.log('🔄 WebSocket断开，智能轮询继续监控')
    })

    socket.value.on('connect_error', (error) => {
      isConnected.value = false
      console.log('❌ WebSocket连接失败:', error.message)
      ElMessage.error('无法连接到服务器，使用离线模式')
    })

    // 任务创建成功事件
    socket.value.on('task_created', (task) => {
      console.log('✅ 任务创建成功:', task)
      console.log('📋 任务数据结构:', JSON.stringify(task, null, 2))

      // 如果后端返回的数据格式不正确，尝试修复
      if (!task.config && (task.name || task.account_config || task.product_config)) {
        console.log('🔧 修复任务数据结构')
        task = {
          id: task.id,
          status: task.status || 'pending',
          progress: task.progress || 0,
          created_at: task.created_at || new Date().toISOString(),
          config: {
            name: task.name,
            url: task.url,
            account_config: task.account_config,
            product_config: task.product_config,
            gift_cards: task.gift_cards || [],
            enabled: task.enabled,
            priority: task.priority,
            use_proxy: task.use_proxy
          }
        }
        console.log('🔧 修复后的任务数据:', task)
      }

      // 🚀 使用局部更新添加任务，避免整页重渲染
      const existingIndex = tasks.value.findIndex(t => t.id === task.id)
      if (existingIndex === -1) {
        // 直接添加到现有列表，Vue会自动处理响应式更新
        tasks.value.push(task)
        console.log('📋 新任务已局部添加:', task.config?.name)
        ElMessage.success(`任务创建成功: ${task.config?.name}`)
      } else {
        // 更新现有任务，保持引用稳定
        Object.assign(tasks.value[existingIndex], task)
        console.log('🔄 任务已局部更新:', task.id)
      }
    })

    // 任务创建错误事件
    socket.value.on('task_create_error', (data) => {
      console.error('❌ 任务创建失败:', data)
      ElMessage.error(`任务创建失败: ${data.error || '未知错误'}`)
    })

    // 🚀 任务删除成功事件 - 局部移除
    socket.value.on('task_delete_success', (data) => {
      console.log('✅ 收到 task_delete_success 事件:', data)
      handleTaskDeletion(data.task_id, '任务删除成功')
    })

    socket.value.on('task_deleted', (data) => {
      console.log('✅ 收到 task_deleted 事件:', data)
      handleTaskDeletion(data.task_id)
    })

    // 任务删除错误事件
    socket.value.on('task_delete_error', (data) => {
      console.error('❌ 任务删除失败:', data)
      ElMessage.error(`任务删除失败: ${data.message || '未知错误'}`)
    })

    socket.value.on('task_update', (data) => {
      console.log('📝 收到任务更新:', data)
      // 🚀 修复：后端发送的是完整任务对象，不是{task_id, updates}格式
      if (data && data.id) {
        handleTaskUpdate(data)
      } else {
        console.warn('⚠️ 收到无效的任务更新数据:', data)
      }
    })

    socket.value.on('system_status', (data) => {
      systemStatus.value = data
    })

    // 通用错误事件
    socket.value.on('error', (data) => {
      console.error('❌ WebSocket错误:', data)
      ElMessage.error(data.message || '发生未知错误')
    })

    // ==================== 🚀 SOTA实时同步事件 ====================

    // 任务状态更新事件（优化频率）
    socket.value.on('task_status_update', (data) => {
      console.log('🔄 收到任务状态更新:', data)
      handleTaskStatusUpdate(data)
    })

    // 步骤更新事件（优化频率）
    socket.value.on('step_update', (data) => {
      console.log('🔄 收到步骤更新:', data)
      console.log('🔄 步骤更新详情:', JSON.stringify(data, null, 2))
      handleStepUpdate(data)
    })

    // 礼品卡输入请求事件
    socket.value.on('gift_card_input_required', (data) => {
      console.log('🎁 收到礼品卡输入请求:', data)
      handleGiftCardInputRequired(data)
    })

    // 任务日志事件
    socket.value.on('task_log', (data) => {
      console.log('📝 收到任务日志:', data)
      handleTaskLog(data)
    })

    // 🚀 关键：任务启动成功事件 - 立即响应
    socket.value.on('task_start_success', (data) => {
      console.log('🚀 任务启动成功:', data)
      ElMessage.success(`任务 ${data.task_id} 启动成功`)

      // 立即更新任务状态为运行中
      const taskIndex = tasks.value.findIndex(t => t.id === data.task_id)
      if (taskIndex >= 0) {
        tasks.value[taskIndex].status = 'running'
        tasks.value[taskIndex].progress = 0
        tasks.value[taskIndex].started_at = new Date().toISOString()
        console.log('🔄 任务状态已立即更新为运行中')

        // 更新当前查看的任务详情
        if (selectedTask.value && selectedTask.value.id === data.task_id) {
          selectedTask.value = { ...tasks.value[taskIndex] }
        }
      }
    })

    socket.value.on('task_start_error', (data) => {
      console.error('❌ 任务启动失败:', data)
      ElMessage.error(`任务启动失败: ${data.message}`)
    })

    socket.value.on('task_cancel_success', (data) => {
      console.log('⏸️ 任务取消成功:', data)
      ElMessage.warning(`任务 ${data.task_id} 已取消`)

      // 立即更新任务状态
      const taskIndex = tasks.value.findIndex(t => t.id === data.task_id)
      if (taskIndex >= 0) {
        tasks.value[taskIndex].status = 'cancelled'

        // 更新当前查看的任务详情
        if (selectedTask.value && selectedTask.value.id === data.task_id) {
          selectedTask.value = { ...tasks.value[taskIndex] }
        }
      }
    })

    socket.value.on('task_cancel_error', (data) => {
      console.error('❌ 任务取消失败:', data)
      ElMessage.error(`任务取消失败: ${data.message}`)
    })

    // 🚨 账号安全问题事件
    socket.value.on('account_security_issue', (data) => {
      console.error('🚨 收到账号安全问题事件:', data)
      handleAccountSecurityIssue(data)
    })

    // 移除高频率轮询，改为事件驱动的同步
    console.log('✅ WebSocket事件监听器已设置完成')
  } catch (error) {
    console.error('❌ WebSocket初始化失败:', error)
    isConnected.value = false
    ElMessage.warning('WebSocket初始化失败，使用离线模式')
  }
}

// 更新任务
const updateTask = (taskId, updates) => {
  if (!Array.isArray(tasks.value)) {
    console.error('❌ 无法更新任务，tasks.value 不是数组')
    return
  }
  const taskIndex = tasks.value.findIndex(t => t.id === taskId)
  if (taskIndex >= 0) {
    tasks.value[taskIndex] = { ...tasks.value[taskIndex], ...updates }

    // 如果是当前查看的任务，也更新详情
    if (selectedTask.value && selectedTask.value.id === taskId) {
      selectedTask.value = { ...tasks.value[taskIndex] }
    }
  }
}

// 🚀 带防抖的任务更新处理 - 避免频繁更新导致页面重渲染
const handleTaskUpdate = (taskData) => {
  try {
    if (!taskData || !taskData.id) {
      console.warn('⚠️ 无效的任务数据')
      return
    }

    // 🚀 使用防抖机制，避免短时间内的频繁更新
    if (updateTasksDebounceTimer) {
      clearTimeout(updateTasksDebounceTimer)
    }

    updateTasksDebounceTimer = setTimeout(() => {
      _performTaskUpdate(taskData)
    }, DEBOUNCE_DELAY)
  } catch (error) {
    console.error('处理任务更新失败:', error)
  }
}

// 实际执行任务更新的函数
const _performTaskUpdate = (taskData) => {
  try {

    const taskIndex = tasks.value.findIndex(t => t.id === taskData.id)
    if (taskIndex >= 0) {
      // 局部更新：只更新变化的属性
      const existingTask = tasks.value[taskIndex]
      const hasChanges =
        existingTask.status !== taskData.status ||
        existingTask.progress !== taskData.progress ||
        existingTask.current_step !== taskData.current_step ||
        (taskData.logs && taskData.logs.length !== (existingTask.logs?.length || 0))

      if (hasChanges) {
        // 使用Object.assign保持响应式
        Object.assign(existingTask, taskData)
        existingTask.last_updated = new Date().toISOString()

        // 如果是当前查看的任务，也更新详情
        if (selectedTask.value && selectedTask.value.id === taskData.id) {
          selectedTask.value = { ...existingTask }
        }

        console.log('🔄 任务已更新:', taskData.id, taskData.status)
      }
    } else {
      // 新任务，添加到列表
      tasks.value.push(taskData)
      console.log('📋 新任务已添加:', taskData.id)
    }
  } catch (error) {
    console.error('处理任务更新失败:', error)
  }
}

// 🚀 统一的任务删除处理 - 避免重复删除
const handleTaskDeletion = (taskId, successMessage = null) => {
  try {
    const index = tasks.value.findIndex(t => t.id === taskId)
    if (index >= 0) {
      const taskName = tasks.value[index].config?.name || taskId
      tasks.value.splice(index, 1)
      console.log('📋 任务已局部移除:', taskId, taskName)

      // 如果当前查看的是被删除的任务，关闭详情对话框
      if (selectedTask.value && selectedTask.value.id === taskId) {
        selectedTask.value = null
        showDetailDialog.value = false
      }

      // 显示成功消息（避免重复显示）
      if (successMessage) {
        ElMessage.success(successMessage)
      }
    } else {
      console.log('⚠️ 要删除的任务不存在:', taskId)
    }
  } catch (error) {
    console.error('处理任务删除失败:', error)
  }
}

// 刷新任务列表
const refreshTasks = async () => {
  try {
    const response = await axios.get('http://localhost:5001/api/tasks')
    console.log('📥 收到任务数据:', response.data)

    // 处理不同的响应格式
    let taskData = response.data

    // 如果响应包含 tasks 字段，使用该字段
    if (response.data && response.data.tasks) {
      taskData = response.data.tasks
    }

    // 确保数据是数组
    if (Array.isArray(taskData)) {
      // 修复任务数据结构
      const fixedTasks = taskData.map(task => {
        // 如果任务没有config结构，尝试修复
        if (!task.config && (task.name || task.account_config || task.product_config)) {
          console.log('🔧 修复API任务数据结构:', task.id)
          return {
            id: task.id,
            status: task.status || 'pending',
            progress: task.progress || 0,
            created_at: task.created_at || new Date().toISOString(),
            config: {
              name: task.name,
              url: task.url,
              account_config: task.account_config,
              product_config: task.product_config,
              gift_cards: task.gift_cards || [],
              enabled: task.enabled,
              priority: task.priority,
              use_proxy: task.use_proxy
            }
          }
        }
        return task
      })

      // 🚀 局部更新：只更新变化的任务，避免整页重渲染
      updateTasksLocally(fixedTasks)

      console.log('✅ 任务列表已局部更新:', tasks.value.length, '个任务')

      // 详细显示每个任务的信息
      tasks.value.forEach((task, index) => {
        console.log(`📋 任务 ${index + 1}:`, {
          id: task.id,
          name: task.config?.name,
          product: task.product,
          url: task.config?.url,
          status: task.status
        })
      })
    } else {
      console.warn('⚠️ API返回的数据格式:', typeof taskData, taskData)
      // 如果不是数组，尝试转换或使用空数组
      tasks.value = []
      ElMessage.warning('任务数据格式异常，已重置为空')
    }
  } catch (error) {
    console.error('❌ 刷新任务失败:', error)
    // 确保 tasks.value 始终是数组
    if (!Array.isArray(tasks.value)) {
      tasks.value = []
    }
    if (error.code === 'ECONNREFUSED' || error.code === 'ERR_NETWORK') {
      console.log('🔄 后端服务不可用，保持当前数据')
    } else {
      ElMessage.error('刷新任务失败: ' + (error.response?.data?.message || error.message))
    }
  }
}

// 🚀 局部更新任务列表 - 只更新变化的任务，保持页面稳定
const updateTasksLocally = (newTasks) => {
  try {
    // 如果当前列表为空，直接设置
    if (tasks.value.length === 0) {
      tasks.value = newTasks
      console.log('📋 初始化任务列表:', newTasks.length, '个任务')
      return
    }

    // 创建任务ID映射，用于快速查找
    const currentTaskMap = new Map()
    tasks.value.forEach(task => {
      currentTaskMap.set(task.id, task)
    })

    const newTaskMap = new Map()
    newTasks.forEach(task => {
      newTaskMap.set(task.id, task)
    })

    let addedCount = 0
    let updatedCount = 0
    let removedCount = 0

    // 1. 更新现有任务或添加新任务
    newTasks.forEach(newTask => {
      const existingTaskIndex = tasks.value.findIndex(t => t.id === newTask.id)

      if (existingTaskIndex >= 0) {
        // 任务已存在，检查是否需要更新
        const existingTask = tasks.value[existingTaskIndex]
        if (JSON.stringify(existingTask) !== JSON.stringify(newTask)) {
          // 只更新变化的属性，保持Vue响应式
          Object.assign(existingTask, newTask)
          updatedCount++
          console.log('🔄 更新任务:', newTask.id, newTask.config?.name)
        }
      } else {
        // 新任务，添加到列表
        tasks.value.push(newTask)
        addedCount++
        console.log('➕ 添加新任务:', newTask.id, newTask.config?.name)
      }
    })

    // 2. 移除不存在的任务
    for (let i = tasks.value.length - 1; i >= 0; i--) {
      const task = tasks.value[i]
      if (!newTaskMap.has(task.id)) {
        tasks.value.splice(i, 1)
        removedCount++
        console.log('➖ 移除任务:', task.id, task.config?.name)
      }
    }

    // 3. 更新当前查看的任务详情
    if (selectedTask.value && newTaskMap.has(selectedTask.value.id)) {
      selectedTask.value = { ...newTaskMap.get(selectedTask.value.id) }
    }

    console.log(`✅ 局部更新完成: +${addedCount} ~${updatedCount} -${removedCount}`)
  } catch (error) {
    console.error('❌ 局部更新失败:', error)
    // 降级到直接替换
    tasks.value = newTasks
  }
}

// 🚀 局部刷新账号列表
const refreshAccounts = async () => {
  try {
    console.log('📡 正在获取账号列表...')
    const response = await axios.get('http://localhost:5001/api/accounts')
    updateAccountsLocally(response.data)
    console.log('✅ 账号列表已局部更新:', accounts.value.length, '个账号')
  } catch (error) {
    console.error('❌ 获取账号失败:', error)
    if (error.code === 'ECONNREFUSED' || error.code === 'ERR_NETWORK') {
      console.log('🔄 后端服务不可用，保持当前账号列表')
      if (accounts.value.length === 0) {
        ElMessage.warning('后端服务不可用，无法加载账号列表')
      }
    } else {
      ElMessage.error('获取账号失败: ' + (error.response?.data?.message || error.message))
    }
  }
}

// 🚀 局部更新账号列表
const updateAccountsLocally = (newAccounts) => {
  try {
    if (!Array.isArray(newAccounts)) {
      console.warn('⚠️ 账号数据不是数组格式')
      return
    }

    // 如果当前列表为空，直接设置
    if (accounts.value.length === 0) {
      accounts.value = newAccounts
      console.log('📋 初始化账号列表:', newAccounts.length, '个账号')
      return
    }

    let addedCount = 0
    let updatedCount = 0
    let removedCount = 0

    // 创建新账号映射
    const newAccountMap = new Map()
    newAccounts.forEach(account => {
      newAccountMap.set(account.id, account)
    })

    // 1. 更新现有账号或添加新账号
    newAccounts.forEach(newAccount => {
      const existingIndex = accounts.value.findIndex(a => a.id === newAccount.id)

      if (existingIndex >= 0) {
        // 账号已存在，检查是否需要更新
        const existing = accounts.value[existingIndex]
        if (JSON.stringify(existing) !== JSON.stringify(newAccount)) {
          Object.assign(existing, newAccount)
          updatedCount++
        }
      } else {
        // 新账号
        accounts.value.push(newAccount)
        addedCount++
      }
    })

    // 2. 移除不存在的账号
    for (let i = accounts.value.length - 1; i >= 0; i--) {
      const account = accounts.value[i]
      if (!newAccountMap.has(account.id)) {
        accounts.value.splice(i, 1)
        removedCount++
      }
    }

    if (addedCount > 0 || updatedCount > 0 || removedCount > 0) {
      console.log(`✅ 账号局部更新: +${addedCount} ~${updatedCount} -${removedCount}`)
    }
  } catch (error) {
    console.error('❌ 账号局部更新失败:', error)
    accounts.value = newAccounts
  }
}

// 🚀 局部刷新礼品卡列表
const refreshGiftCards = async () => {
  try {
    console.log('📡 正在获取礼品卡列表...')
    const response = await axios.get('http://localhost:5001/api/gift-cards')
    updateGiftCardsLocally(response.data)
    console.log('✅ 礼品卡列表已局部更新:', giftCards.value.length, '张礼品卡')
  } catch (error) {
    console.error('❌ 获取礼品卡失败:', error)
    if (error.code === 'ECONNREFUSED' || error.code === 'ERR_NETWORK') {
      console.log('🔄 后端服务不可用，保持当前礼品卡列表')
      if (giftCards.value.length === 0) {
        ElMessage.warning('后端服务不可用，无法加载礼品卡列表')
      }
    } else {
      ElMessage.error('获取礼品卡失败: ' + (error.response?.data?.message || error.message))
    }
  }
}

// 🚀 局部更新礼品卡列表
const updateGiftCardsLocally = (newGiftCards) => {
  try {
    if (!Array.isArray(newGiftCards)) {
      console.warn('⚠️ 礼品卡数据不是数组格式')
      return
    }

    // 如果当前列表为空，直接设置
    if (giftCards.value.length === 0) {
      giftCards.value = newGiftCards
      console.log('📋 初始化礼品卡列表:', newGiftCards.length, '张礼品卡')
      return
    }

    let addedCount = 0
    let updatedCount = 0
    let removedCount = 0

    // 创建新礼品卡映射
    const newCardMap = new Map()
    newGiftCards.forEach(card => {
      newCardMap.set(card.id, card)
    })

    // 1. 更新现有礼品卡或添加新礼品卡
    newGiftCards.forEach(newCard => {
      const existingIndex = giftCards.value.findIndex(c => c.id === newCard.id)

      if (existingIndex >= 0) {
        // 礼品卡已存在，检查是否需要更新
        const existing = giftCards.value[existingIndex]
        if (JSON.stringify(existing) !== JSON.stringify(newCard)) {
          Object.assign(existing, newCard)
          updatedCount++
        }
      } else {
        // 新礼品卡
        giftCards.value.push(newCard)
        addedCount++
      }
    })

    // 2. 移除不存在的礼品卡
    for (let i = giftCards.value.length - 1; i >= 0; i--) {
      const card = giftCards.value[i]
      if (!newCardMap.has(card.id)) {
        giftCards.value.splice(i, 1)
        removedCount++
      }
    }

    if (addedCount > 0 || updatedCount > 0 || removedCount > 0) {
      console.log(`✅ 礼品卡局部更新: +${addedCount} ~${updatedCount} -${removedCount}`)
    }
  } catch (error) {
    console.error('❌ 礼品卡局部更新失败:', error)
    giftCards.value = newGiftCards
  }
}

// 加载iPhone配置
const loadIphoneConfigs = async () => {
  try {
    console.log('� 正在加载iPhone配置...')
    const response = await axios.get('http://localhost:5001/api/config/iphone-configs')
    console.log('✅ iPhone配置加载成功:', response.data)
    console.log('📊 模型数量:', Object.keys(response.data.models || {}).length)

    // 更新配置数据
    Object.assign(iphoneConfigs, response.data)
    console.log('📱 Vue数据已更新，可用模型:', Object.keys(iphoneConfigs.models))
    ElMessage.success('iPhone配置加载成功')
  } catch (error) {
    console.error('❌ 加载iPhone配置失败:', error)
    console.error('错误详情:', error.response?.data || error.message)

    // 如果后端不可用，使用基础的模拟配置
    if (error.code === 'ECONNREFUSED' || error.code === 'ERR_NETWORK') {
      console.log('🔄 后端服务不可用，使用模拟iPhone配置')
      const mockConfig = {
        models: {
          'iphone-15-pro': {
            name: 'iPhone 15 Pro',
            sizes: {
              '6.1': {
                name: '6.1英寸',
                storages: ['128gb', '256gb', '512gb', '1tb'],
                colors: ['natural-titanium', 'blue-titanium', 'white-titanium', 'black-titanium']
              }
            }
          },
          'iphone-15': {
            name: 'iPhone 15',
            sizes: {
              '6.1': {
                name: '6.1英寸',
                storages: ['128gb', '256gb', '512gb'],
                colors: ['pink', 'yellow', 'green', 'blue', 'black']
              }
            }
          }
        },
        color_display_names: {
          'natural-titanium': '原色钛金属',
          'blue-titanium': '蓝色钛金属',
          'white-titanium': '白色钛金属',
          'black-titanium': '黑色钛金属',
          'pink': '粉色',
          'yellow': '黄色',
          'green': '绿色',
          'blue': '蓝色',
          'black': '黑色'
        },
        storage_display_names: {
          '128gb': '128GB',
          '256gb': '256GB',
          '512gb': '512GB',
          '1tb': '1TB'
        }
      }

      Object.assign(iphoneConfigs, mockConfig)
      console.log('✅ 模拟iPhone配置已加载:', mockConfig)
      ElMessage.warning('后端服务不可用，使用模拟iPhone配置')
    } else {
      ElMessage.error('加载iPhone配置失败: ' + (error.response?.data?.error || error.message))
    }
  }
}

// 工具方法
const getTasksByProduct = (productType) => {
  // 安全检查：确保 tasks.value 是数组
  if (!Array.isArray(tasks.value)) {
    console.error('❌ tasks.value 不是数组:', tasks.value)
    tasks.value = [] // 重置为空数组
    return []
  }

  console.log(`🔍 筛选 ${productType} 任务，总任务数:`, tasks.value.length)

  // 🚀 只显示待运行和正在运行的任务
  const activeStatuses = ['pending', 'running', 'stage_1_product_config', 'stage_2_account_login', 'stage_3_address_phone', 'stage_4_gift_card', 'waiting_gift_card_input']

  const filteredTasks = tasks.value.filter(task => {
    console.log('🔍 检查任务完整数据:', task)
    console.log('🔍 检查任务关键字段:', {
      id: task.id,
      product: task.product,
      url: task.config?.url,
      name: task.config?.name,
      status: task.status,
      config: task.config
    })

    // 🚀 首先检查任务状态是否为活跃状态
    if (!activeStatuses.includes(task.status)) {
      console.log(`🔍 任务 ${task.id} 状态 ${task.status} 不在活跃状态列表中，跳过`)
      return false
    }

    // 多种匹配方式，兼容不同的数据格式

    // 方式1: 通过 product 字段匹配
    if (task.product === productType) {
      console.log('✅ 通过 product 字段匹配:', task.id)
      return true
    }

    // 方式2: 通过 config.url 或 url 判断产品类型
    const url = task.config?.url || task.url || ''
    if (url) {
      let matched = false
      switch(productType) {
        case 'iphone':
          matched = url.includes('iphone')
          break
        case 'mac':
          matched = url.includes('mac')
          break
        case 'ipad':
          matched = url.includes('ipad')
          break
        case 'watch':
          matched = url.includes('watch')
          break
        default:
          matched = false
      }

      if (matched) {
        console.log('✅ 通过 URL 匹配:', task.id, url)
        return true
      }
    }

    // 方式3: 通过 config.product_config.model 判断（iPhone特殊处理）
    if (productType === 'iphone' && task.config?.product_config?.model) {
      const model = task.config.product_config.model.toLowerCase()
      if (model.includes('iphone')) {
        console.log('✅ 通过 model 匹配:', task.id, model)
        return true
      }
    }

    // 方式4: 如果是我们刚创建的任务，可能还没有完整的URL，但有配置信息
    if (productType === 'iphone' && task.config?.product_config &&
        (task.config.product_config.model || task.config.product_config.storage || task.config.product_config.finish)) {
      console.log('✅ 通过产品配置匹配 (iPhone):', task.id)
      return true
    }

    // 方式5: 临时解决方案 - 如果任务有product_config但字段为空，暂时认为是iPhone任务
    // 这是因为当前后端返回的数据字段都是空的
    if (productType === 'iphone' && task.config?.product_config) {
      console.log('✅ 通过存在product_config匹配 (临时方案):', task.id)
      return true
    }

    console.log('❌ 未匹配:', task.id, {
      product: task.product,
      url: url,
      model: task.config?.product_config?.model,
      hasProductConfig: !!task.config?.product_config,
      configKeys: task.config ? Object.keys(task.config) : []
    })

    return false
  })

  console.log(`📱 ${productType} 活跃任务筛选结果:`, filteredTasks.length, '个任务')
  return filteredTasks
}

const getStatusType = (status) => {
  const statusMap = {
    'pending': 'info',
    'running': 'warning',
    'stage_1_product_config': 'warning',
    'stage_2_account_login': 'warning',
    'stage_3_address_phone': 'warning',
    'stage_4_gift_card': 'warning',
    'waiting_gift_card_input': 'danger',
    'completed': 'success',
    'failed': 'danger',
    'cancelled': 'info'
  }
  return statusMap[status] || 'info'
}

const getStatusText = (status) => {
  const statusMap = {
    'pending': '等待中',
    'running': '运行中',
    'stage_1_product_config': '产品配置',
    'stage_2_account_login': '账号登录',
    'stage_3_address_phone': '地址电话',
    'stage_4_gift_card': '礼品卡配置',
    'waiting_gift_card_input': '等待输入',
    'completed': '已完成',
    'failed': '失败',
    'cancelled': '已取消'
  }
  return statusMap[status] || status
}

// 任务操作方法
const startTask = (taskId) => {
  console.log('🚀 启动任务:', taskId)

  // 使用WebSocket发送启动请求（按原系统逻辑）
  if (socket.value && isConnected.value) {
    socket.value.emit('start_task', { task_id: taskId })
    ElMessage.success('任务启动请求已发送')
    console.log('✅ 启动请求已通过WebSocket发送')
  } else {
    // 如果WebSocket未连接，尝试HTTP API作为降级
    console.log('🔄 WebSocket未连接，尝试HTTP API启动')
    startTaskViaHttp(taskId)
  }
}

// HTTP API启动任务（降级方案）
const startTaskViaHttp = async (taskId) => {
  try {
    await axios.post(`http://localhost:5001/api/tasks/${taskId}/start`)
    ElMessage.success('任务启动成功')

    // 更新本地任务状态
    const taskIndex = tasks.value.findIndex(t => t.id === taskId)
    if (taskIndex >= 0) {
      tasks.value[taskIndex].status = 'running'
      console.log('✅ 任务状态已更新为运行中:', taskId)
    }
  } catch (error) {
    console.error('❌ HTTP启动任务失败:', error)
    ElMessage.error('启动任务失败: ' + (error.response?.data?.message || error.message))
  }
}

const startAllTasks = async () => {
  try {
    await axios.post('http://localhost:5001/api/tasks/start-all')
    ElMessage.success('所有任务启动成功')

    // WebSocket会自动更新状态，无需手动刷新
    console.log('✅ 所有任务启动请求已发送，等待WebSocket更新状态')
  } catch (error) {
    console.error('启动所有任务失败:', error)
    ElMessage.error('启动所有任务失败')
  }
}

const deleteTask = (taskId) => {
  ElMessageBox.confirm('确定要删除这个任务吗？删除后无法恢复。', '确认删除', {
    confirmButtonText: '删除',
    cancelButtonText: '取消',
    type: 'error'
  }).then(() => {
    console.log('🗑️ 发送删除任务请求:', taskId)

    // 使用WebSocket发送删除请求（按原系统逻辑）
    if (socket.value && isConnected.value) {
      socket.value.emit('delete_task', { task_id: taskId })
      ElMessage.warning('任务删除请求已发送')
      console.log('✅ 删除请求已通过WebSocket发送')
    } else {
      // 如果WebSocket未连接，尝试HTTP API作为降级
      console.log('🔄 WebSocket未连接，尝试HTTP API删除')
      deleteTaskViaHttp(taskId)
    }
  }).catch(() => {
    // 用户取消删除
    console.log('❌ 用户取消删除任务')
  })
}

// HTTP API删除任务（降级方案）
const deleteTaskViaHttp = async (taskId) => {
  try {
    await axios.delete(`http://localhost:5001/api/tasks/${taskId}`)
    ElMessage.success('任务删除成功')

    // 从本地列表中移除任务
    const taskIndex = tasks.value.findIndex(t => t.id === taskId)
    if (taskIndex >= 0) {
      tasks.value.splice(taskIndex, 1)
      console.log('✅ 任务已从本地列表移除:', taskId)
    }
  } catch (error) {
    console.error('❌ HTTP删除任务失败:', error)
    ElMessage.error('删除任务失败: ' + (error.response?.data?.message || error.message))
  }
}

const viewTaskDetail = (task) => {
  console.log('查看任务详情:', task)
  selectedTask.value = task
  showDetailDialog.value = true
}

const openCreateDialog = () => {
  taskForm.product = currentProduct.value
  showCreateDialog.value = true
}

// iPhone配置选择变化处理
const onModelChange = () => {
  // 重置后续选择
  taskForm.selectedSize = ''
  taskForm.selectedStorage = ''
  taskForm.selectedColor = ''
  generatedUrl.value = ''
  console.log('📱 型号已选择:', taskForm.selectedModel)
}

const onSizeChange = () => {
  // 重置后续选择
  taskForm.selectedStorage = ''
  taskForm.selectedColor = ''
  generatedUrl.value = ''
  console.log('📏 尺寸已选择:', taskForm.selectedSize)
}

const onStorageChange = () => {
  // 重置颜色选择
  taskForm.selectedColor = ''
  generatedUrl.value = ''
  console.log('💾 存储已选择:', taskForm.selectedStorage)
}

const onColorChange = async () => {
  console.log('🎨 颜色已选择:', taskForm.selectedColor)
  if (taskForm.selectedModel && taskForm.selectedSize &&
      taskForm.selectedStorage && taskForm.selectedColor) {
    await generateProductUrl()
  }
}

// 生成产品URL - 调用后端API
const generateProductUrl = async () => {
  if (!taskForm.selectedModel || !taskForm.selectedSize || !taskForm.selectedStorage || !taskForm.selectedColor) {
    generatedUrl.value = ''
    return
  }

  try {
    console.log('🔗 调用后端生成URL...')
    const response = await axios.post('http://localhost:5001/api/config/generate-url', {
      model: taskForm.selectedModel,
      size: taskForm.selectedSize,
      storage: taskForm.selectedStorage,
      color: taskForm.selectedColor
    })

    if (response.data.success) {
      generatedUrl.value = response.data.url
      taskForm.url = response.data.url
      isValidUrl.value = true
      console.log('✅ URL生成成功:', generatedUrl.value)
    } else {
      console.error('❌ URL生成失败:', response.data.error)
      ElMessage.error('URL生成失败: ' + (response.data.error || '未知错误'))
    }
  } catch (error) {
    console.error('❌ 调用URL生成API失败:', error)

    // 如果后端不可用，使用模拟逻辑（支持apple.uk）
    console.log('🔄 后端不可用，使用模拟URL生成')
    const baseUrl = 'https://www.apple.com/uk/shop/buy-iphone'  // 使用UK域名
    const modelPath = taskForm.selectedModel.replace('iphone-', 'iphone-')
    generatedUrl.value = `${baseUrl}/${modelPath}?model=${taskForm.selectedModel}&size=${taskForm.selectedSize}&storage=${taskForm.selectedStorage}&color=${taskForm.selectedColor}`
    taskForm.url = generatedUrl.value

    console.log('🔗 模拟生成的URL:', generatedUrl.value)
    ElMessage.warning('使用模拟URL生成（后端服务不可用）')
  }
}

// URL解析功能
const parseUrlIfNeeded = () => {
  if (taskForm.url && taskForm.url.includes('apple.com')) {
    parseUrl()
  }
}

const parseUrl = async () => {
  if (!taskForm.url) {
    ElMessage.warning('请先输入URL')
    return
  }

  parsingUrl.value = true
  try {
    console.log('🔍 解析URL:', taskForm.url)
    const response = await axios.post('http://localhost:5001/api/config/parse-url', {
      url: taskForm.url
    })

    if (response.data.success) {
      const config = response.data.config
      taskForm.selectedModel = config.model
      taskForm.selectedSize = config.size
      taskForm.selectedStorage = config.storage
      taskForm.selectedColor = config.color
      generatedUrl.value = taskForm.url
      isValidUrl.value = true
      console.log('✅ URL解析成功:', config)
      ElMessage.success('URL解析成功')
    } else {
      isValidUrl.value = false
      console.error('❌ URL解析失败:', response.data.error)
      ElMessage.error(response.data.error || 'URL解析失败')
    }
  } catch (error) {
    console.error('❌ URL解析API调用失败:', error)
    isValidUrl.value = false
    ElMessage.error('URL解析失败，请检查URL格式或后端服务')
  } finally {
    parsingUrl.value = false
  }
}

// 复制URL功能
const copyUrl = async () => {
  if (!generatedUrl.value) {
    ElMessage.warning('没有可复制的URL')
    return
  }

  try {
    await navigator.clipboard.writeText(generatedUrl.value)
    ElMessage.success('URL已复制到剪贴板')
  } catch (error) {
    console.error('复制失败:', error)
    // 降级方案
    const textArea = document.createElement('textarea')
    textArea.value = generatedUrl.value
    document.body.appendChild(textArea)
    textArea.select()
    try {
      document.execCommand('copy')
      ElMessage.success('URL已复制到剪贴板')
    } catch (err) {
      ElMessage.error('复制失败')
    }
    document.body.removeChild(textArea)
  }
}

// 账号管理方法
const testAccount = async (accountId) => {
  try {
    await axios.post(`http://localhost:5001/api/accounts/${accountId}/test`)
    ElMessage.success('账号测试成功')
    // 账号测试不需要刷新列表，状态不会改变
  } catch (error) {
    console.error('测试账号失败:', error)
    ElMessage.error('测试账号失败')
  }
}

const deleteAccount = async (accountId) => {
  try {
    await ElMessageBox.confirm('确定要删除这个账号吗？', '确认删除', {
      confirmButtonText: '确定',
      cancelButtonText: '取消',
      type: 'warning'
    })

    await axios.delete(`http://localhost:5001/api/accounts/${accountId}`)
    ElMessage.success('账号删除成功')

    // 🚀 乐观更新：直接从本地列表移除，避免刷新
    const index = accounts.value.findIndex(acc => acc.id === accountId)
    if (index >= 0) {
      accounts.value.splice(index, 1)
      console.log('✅ 账号已从本地列表移除')
    }
  } catch (error) {
    if (error !== 'cancel') {
      console.error('删除账号失败:', error)
      ElMessage.error('删除账号失败')
    }
  }
}

const addAccount = async () => {
  try {
    // 验证表单
    if (!accountForm.email || !accountForm.password) {
      ElMessage.error('请填写Apple ID和密码')
      return
    }

    const accountData = {
      email: accountForm.email,
      password: accountForm.password,
      note: accountForm.note
    }

    const response = await axios.post('http://localhost:5001/api/accounts', accountData)
    ElMessage.success('账号添加成功')
    showAddAccountDialog.value = false

    // 🚀 乐观更新：直接添加到本地列表，避免刷新
    if (response.data && response.data.account) {
      accounts.value.push(response.data.account)
      console.log('✅ 新账号已添加到本地列表')
    } else {
      // 如果后端没有返回账号数据，则刷新列表
      refreshAccounts()
    }

    // 重置表单
    Object.assign(accountForm, {
      email: '',
      password: '',
      note: ''
    })
  } catch (error) {
    console.error('添加账号失败:', error)
    ElMessage.error('添加账号失败')
  }
}

// 礼品卡管理方法
const getGiftCardStatusType = (status) => {
  const statusMap = {
    '有额度': 'success',
    '0余额': 'warning',
    '非本国卡': 'danger',
    '被充值': 'info'
  }
  return statusMap[status] || ''
}

const editGiftCard = (giftCard) => {
  editingGiftCard.value = giftCard
  Object.assign(giftCardForm, {
    gift_card_number: giftCard.gift_card_number,
    status: giftCard.status,
    balance: giftCard.balance || '',
    notes: giftCard.notes || ''
  })
  showAddGiftCardDialog.value = true
}

const addGiftCard = async () => {
  try {
    // 验证表单
    if (!giftCardForm.gift_card_number || !giftCardForm.status) {
      ElMessage.error('请填写礼品卡号和状态')
      return
    }

    const giftCardData = {
      gift_card_number: giftCardForm.gift_card_number,
      status: giftCardForm.status,
      balance: giftCardForm.balance || 0,
      notes: giftCardForm.notes
    }

    if (editingGiftCard.value) {
      // 更新礼品卡
      const response = await axios.put(`http://localhost:5001/api/gift-cards/${editingGiftCard.value.id}`, giftCardData)
      ElMessage.success('礼品卡更新成功')

      // 🚀 乐观更新：直接更新本地列表中的礼品卡
      const index = giftCards.value.findIndex(card => card.id === editingGiftCard.value.id)
      if (index >= 0 && response.data && response.data.gift_card) {
        giftCards.value[index] = response.data.gift_card
        console.log('✅ 礼品卡已在本地列表中更新')
      }
    } else {
      // 创建礼品卡
      const response = await axios.post('http://localhost:5001/api/gift-cards', giftCardData)
      ElMessage.success('礼品卡添加成功')

      // 🚀 乐观更新：直接添加到本地列表
      if (response.data && response.data.gift_card) {
        giftCards.value.push(response.data.gift_card)
        console.log('✅ 新礼品卡已添加到本地列表')
      }
    }

    showAddGiftCardDialog.value = false
    editingGiftCard.value = null

    // 重置表单
    Object.assign(giftCardForm, {
      gift_card_number: '',
      status: '有额度',
      balance: '',
      notes: ''
    })

    // 只在乐观更新失败时才刷新
    // refreshGiftCards() - 已移除，使用乐观更新
  } catch (error) {
    console.error('保存礼品卡失败:', error)
    ElMessage.error('保存礼品卡失败')
  }
}

const deleteGiftCard = async (cardId) => {
  try {
    await ElMessageBox.confirm('确定要删除这张礼品卡吗？', '确认删除', {
      confirmButtonText: '确定',
      cancelButtonText: '取消',
      type: 'warning'
    })

    await axios.delete(`http://localhost:5001/api/gift-cards/${cardId}`)
    ElMessage.success('礼品卡删除成功')

    // 🚀 乐观更新：直接从本地列表移除，避免刷新
    const index = giftCards.value.findIndex(card => card.id === cardId)
    if (index >= 0) {
      giftCards.value.splice(index, 1)
      console.log('✅ 礼品卡已从本地列表移除')
    }
  } catch (error) {
    if (error !== 'cancel') {
      console.error('删除礼品卡失败:', error)
      ElMessage.error('删除礼品卡失败')
    }
  }
}

const formatTime = (timestamp) => {
  if (!timestamp) return 'N/A'
  return new Date(timestamp).toLocaleString('zh-CN')
}

const formatTimestamp = (timestamp) => {
  if (!timestamp) return 'N/A'
  return new Date(timestamp).toLocaleString('zh-CN', {
    year: 'numeric',
    month: '2-digit',
    day: '2-digit',
    hour: '2-digit',
    minute: '2-digit',
    second: '2-digit'
  })
}

const formatStepName = (step) => {
  const stepMap = {
    'initializing': '🚀 初始化浏览器',
    'navigating': '🧭 导航到页面',
    'configuring_product': '⚙️ 配置产品',
    'adding_to_bag': '🛍️ 添加到购物袋',
    'checkout': '💳 进入结账',
    'applying_gift_card': '🎁 应用礼品卡',
    'finalizing': '✅ 完成购买',
    'started': '▶️ 开始',
    'progress': '⏳ 进行中',
    'completed': '✅ 完成',
    'failed': '❌ 失败'
  }
  return stepMap[step] || step
}

const getLatestLog = (task) => {
  if (!task.logs || task.logs.length === 0) {
    return '暂无日志'
  }
  const latestLog = task.logs[task.logs.length - 1]
  return latestLog.message || '暂无消息'
}

const getLatestLogLevel = (task) => {
  if (!task.logs || task.logs.length === 0) {
    return 'info'
  }
  const latestLog = task.logs[task.logs.length - 1]
  return latestLog.level || 'info'
}

const getLatestLogTime = (task) => {
  if (!task.logs || task.logs.length === 0) {
    return null
  }
  const latestLog = task.logs[task.logs.length - 1]
  return latestLog.timestamp
}

const isTaskActive = (task) => {
  const activeStatuses = ['running', 'stage_1_product_config', 'stage_2_account_login', 'stage_3_address_phone', 'stage_4_gift_card', 'waiting_gift_card_input']
  return activeStatuses.includes(task.status)
}

const getStepTagType = (step) => {
  const stepTypes = {
    'initializing': 'info',
    'navigating': 'primary',
    'configuring_product': 'warning',
    'adding_to_bag': 'success',
    'checkout': 'primary',
    'applying_gift_card': 'warning',
    'finalizing': 'success',
    'waiting_gift_card_input': 'danger'
  }
  return stepTypes[step] || 'primary'
}

const getProgressText = (task, percentage) => {
  if (task.status === 'running') {
    return `${percentage}% 执行中...`
  } else if (task.status === 'waiting_gift_card_input') {
    return `${percentage}% 等待输入`
  } else if (task.status === 'completed') {
    return `${percentage}% 已完成`
  } else if (task.status === 'failed') {
    return `${percentage}% 失败`
  }
  return `${percentage}%`
}

const getLogLevelClass = (level) => {
  const levelClasses = {
    'error': 'log-error',
    'warning': 'log-warning',
    'success': 'log-success',
    'info': 'log-info'
  }
  return levelClasses[level] || 'log-info'
}

const getLogIcon = (level) => {
  const levelIcons = {
    'error': '❌',
    'warning': '⚠️',
    'success': '✅',
    'info': 'ℹ️'
  }
  return levelIcons[level] || 'ℹ️'
}

const getActiveTasks = () => {
  const activeStatuses = ['running', 'stage_1_product_config', 'stage_2_account_login', 'stage_3_address_phone', 'stage_4_gift_card', 'waiting_gift_card_input']
  return tasks.value.filter(task => activeStatuses.includes(task.status))
}

// 🚀 状态显示相关函数
const getStatusTagType = (status) => {
  const statusTypes = {
    'pending': 'info',
    'running': 'primary',
    'stage_1_product_config': 'warning',
    'stage_2_account_login': 'warning',
    'stage_3_address_phone': 'warning',
    'stage_4_gift_card': 'warning',
    'waiting_gift_card_input': 'danger',
    'completed': 'success',
    'failed': 'danger',
    'cancelled': 'info'
  }
  return statusTypes[status] || 'info'
}

const getStatusDisplayName = (status) => {
  const statusNames = {
    'pending': '等待中',
    'running': '运行中',
    'stage_1_product_config': '产品配置',
    'stage_2_account_login': '账号登录',
    'stage_3_address_phone': '地址电话',
    'stage_4_gift_card': '礼品卡配置',
    'waiting_gift_card_input': '等待输入',
    'completed': '已完成',
    'failed': '失败',
    'cancelled': '已取消'
  }
  return statusNames[status] || status
}

// formatTime函数已在上面声明

// 🚨 账号安全问题处理函数
const handleAccountSecurityIssue = (data) => {
  console.error('🚨 处理账号安全问题:', data)

  // 根据是否有锁定消息显示不同的通知
  const notificationMessage = data.lock_message
    ? `账号 ${data.account_email} 已被锁定: ${data.lock_message}`
    : `账号 ${data.account_email} 遇到安全验证问题，请检查账号状态`

  // 显示错误通知
  ElNotification({
    title: '账号安全问题',
    message: notificationMessage,
    type: 'error',
    duration: 15000,
    position: 'top-right'
  })

  // 更新任务状态显示当前URL
  const taskIndex = tasks.value.findIndex(t => t.id === data.task_id)
  if (taskIndex !== -1) {
    const task = tasks.value[taskIndex]

    // 添加安全问题信息到任务
    task.security_issue = {
      current_url: data.current_url,
      page_title: data.page_title,
      lock_message: data.lock_message,
      timestamp: data.timestamp
    }

    // 更新任务状态
    task.status = 'failed'
    task.error_message = data.lock_message
      ? `账号已被锁定: ${data.lock_message}`
      : `账号安全问题: ${data.page_title}`

    // 添加日志
    if (!task.logs) task.logs = []
    task.logs.push({
      timestamp: new Date().toISOString(),
      level: 'error',
      message: data.lock_message
        ? `🚨 账号已被锁定: ${data.lock_message}`
        : `🚨 账号安全问题: ${data.page_title}`
    })
    task.logs.push({
      timestamp: new Date().toISOString(),
      level: 'error',
      message: `🔗 问题页面: ${data.current_url}`
    })

    console.log('✅ 任务安全问题信息已更新:', task)
  }

  // 刷新账号列表（如果账号状态已更新）
  setTimeout(() => {
    fetchAccounts()
  }, 1000)
}

// 🚀 礼品卡输入相关函数
const openGiftCardInput = (task) => {
  console.log('🎁 打开礼品卡输入对话框:', task.id)
  // 设置当前等待输入的任务
  waitingGiftCardTask.value = task
  // 重置表单
  taskGiftCardForm.value = {
    code: '',
    note: ''
  }
  showGiftCardInputDialog.value = true
}

// 格式化礼品卡号码
const formatGiftCardCode = () => {
  // 转换为大写并移除非字母数字字符
  taskGiftCardForm.value.code = taskGiftCardForm.value.code
    .toUpperCase()
    .replace(/[^A-Z0-9]/g, '')
    .substring(0, 16) // 限制最大长度为16
}

const cancelGiftCardInput = () => {
  showGiftCardInputDialog.value = false
  waitingGiftCardTask.value = null
  taskGiftCardForm.value = {
    code: '',
    note: ''
  }
}

const submitGiftCardInput = async () => {
  if (!waitingGiftCardTask.value || !taskGiftCardForm.value.code) {
    ElMessage.error('请输入礼品卡号码')
    return
  }

  try {
    console.log('🎁 提交礼品卡信息:', {
      taskId: waitingGiftCardTask.value.id,
      giftCard: taskGiftCardForm.value
    })

    // 发送礼品卡信息到后端
    const response = await axios.post(`http://localhost:5001/api/tasks/${waitingGiftCardTask.value.id}/gift-card`, {
      code: taskGiftCardForm.value.code.toUpperCase(),
      note: taskGiftCardForm.value.note
    })

    if (response.data.success) {
      ElMessage.success('礼品卡信息已提交，任务继续执行')

      // 更新任务状态
      const task = tasks.value.find(t => t.id === waitingGiftCardTask.value.id)
      if (task) {
        task.status = 'running'
        task.current_step = 'stage_4_gift_card'
      }

      // 关闭对话框
      cancelGiftCardInput()
    } else {
      ElMessage.error(response.data.message || '提交失败')
    }
  } catch (error) {
    console.error('❌ 提交礼品卡信息失败:', error)
    ElMessage.error('提交失败: ' + (error.response?.data?.message || error.message))
  }
}

// 🚀 智能轮询 - 高频轮询活跃任务
const startSmartPolling = () => {
  if (smartPollingTimer) {
    clearInterval(smartPollingTimer)
  }

  if (fullPollingTimer) {
    clearInterval(fullPollingTimer)
  }

  // 🚀 高频轮询活跃任务
  smartPollingTimer = setInterval(async () => {
    try {
      const response = await axios.get('http://localhost:5001/api/tasks/active')
      const activeTasks = response.data || []

      console.log(`🔄 智能轮询: 检查 ${activeTasks.length} 个活跃任务`)

      if (activeTasks.length > 0) {
        updateActiveTasksLocally(activeTasks)
        lastUpdateTime.value = Date.now()
        isRealTimeActive.value = true
      } else {
        console.log('📋 无活跃任务，继续监控')
        isRealTimeActive.value = false
      }
    } catch (error) {
      console.warn('❌ 智能轮询失败:', error.message)
      isRealTimeActive.value = false
    }
  }, SMART_POLLING_INTERVAL)

  // 🚀 低频全量轮询 - 确保任务不丢失
  fullPollingTimer = setInterval(async () => {
    try {
      console.log('🔄 全量轮询: 检查所有任务状态')
      const response = await axios.get('http://localhost:5001/api/tasks')
      if (response.data && response.data.tasks) {
        updateTasksSelectively(response.data.tasks)
      }
    } catch (error) {
      console.error('❌ 全量轮询失败:', error)
    }
  }, FULL_POLLING_INTERVAL)
}

const stopSmartPolling = () => {
  if (smartPollingTimer) {
    clearInterval(smartPollingTimer)
    smartPollingTimer = null
  }
  if (fullPollingTimer) {
    clearInterval(fullPollingTimer)
    fullPollingTimer = null
  }
  isRealTimeActive.value = false
}

// 🚀 选择性更新任务 - 只更新变化的任务，不替换整个列表
const updateTasksSelectively = (newTasks) => {
  try {
    let updatedCount = 0
    let addedCount = 0

    // 更新现有任务或添加新任务
    newTasks.forEach(newTask => {
      const existingIndex = tasks.value.findIndex(t => t.id === newTask.id)

      if (existingIndex >= 0) {
        // 检查是否有变化
        const existing = tasks.value[existingIndex]
        const hasChanges =
          existing.status !== newTask.status ||
          existing.progress !== newTask.progress ||
          existing.current_step !== newTask.current_step ||
          (newTask.logs && newTask.logs.length !== (existing.logs?.length || 0))

        if (hasChanges) {
          // 保持响应式更新
          Object.assign(existing, newTask)
          existing.last_updated = new Date().toISOString()
          updatedCount++

          // 更新当前查看的任务详情
          if (selectedTask.value && selectedTask.value.id === newTask.id) {
            selectedTask.value = { ...existing }
          }
        }
      } else {
        // 新任务，添加到列表
        tasks.value.push(newTask)
        addedCount++
      }
    })

    if (updatedCount > 0 || addedCount > 0) {
      console.log(`✅ 选择性更新完成: 更新${updatedCount}个，新增${addedCount}个任务`)
    }
  } catch (error) {
    console.error('❌ 选择性更新任务失败:', error)
  }
}

// 🚀 从API获取并更新活跃任务状态
const updateActiveTasksFromAPI = async () => {
  try {
    console.log('🔄 强制刷新活跃任务状态...')
    const response = await axios.get('http://localhost:5001/api/tasks/active')
    if (response.data && Array.isArray(response.data)) {
      updateActiveTasksLocally(response.data)
      console.log(`✅ 已刷新 ${response.data.length} 个活跃任务状态`)
    }
  } catch (error) {
    console.error('❌ 刷新活跃任务状态失败:', error)
  }
}

// 🚀 只更新活跃任务的状态
const updateActiveTasksLocally = (activeTasks) => {
  try {
    activeTasks.forEach(activeTask => {
      const localTask = tasks.value.find(t => t.id === activeTask.id)
      if (localTask) {
        // 检查是否有变化
        const hasChanges =
          localTask.status !== activeTask.status ||
          localTask.progress !== activeTask.progress ||
          localTask.current_step !== activeTask.current_step ||
          (activeTask.logs && activeTask.logs.length !== (localTask.logs?.length || 0))

        if (hasChanges) {
          // 更新状态
          if (activeTask.status) localTask.status = activeTask.status
          if (activeTask.progress !== undefined) localTask.progress = activeTask.progress
          if (activeTask.current_step) localTask.current_step = activeTask.current_step

          // 更新日志（只追加新日志）
          if (activeTask.logs && Array.isArray(activeTask.logs)) {
            const currentLogCount = localTask.logs?.length || 0
            if (activeTask.logs.length > currentLogCount) {
              const newLogs = activeTask.logs.slice(currentLogCount)
              if (!localTask.logs) localTask.logs = []
              localTask.logs.push(...newLogs)
              console.log(`📝 追加 ${newLogs.length} 条新日志到任务 ${localTask.id}`)
            }
          }

          localTask.last_updated = new Date().toISOString()

          // 更新当前查看的任务详情
          if (selectedTask.value && selectedTask.value.id === activeTask.id) {
            selectedTask.value = { ...localTask }
          }

          console.log(`🔄 活跃任务已更新: ${activeTask.id} -> ${activeTask.status}`)
        }
      }
    })
  } catch (error) {
    console.error('更新活跃任务失败:', error)
  }
}

// 🚀 启动实时监控系统
const startRealTimeMonitoring = () => {
  console.log('🚀 实时监控系统启动')

  // 检查实时监控状态
  setInterval(() => {
    const now = Date.now()
    const timeSinceLastUpdate = now - lastUpdateTime.value

    // 如果超过30秒没有更新，显示警告
    if (timeSinceLastUpdate > 30000 && getActiveTasks().length > 0) {
      console.warn('⚠️ 实时监控可能异常，超过30秒无更新')
      isRealTimeActive.value = false
    } else if (timeSinceLastUpdate < 10000) {
      isRealTimeActive.value = true
    }
  }, 5000)

  console.log('✅ 实时监控检查器已启动')
}

// 🚀 优化的手动刷新方法 - 只在必要时刷新
const manualRefresh = async () => {
  if (isRefreshing.value) return

  isRefreshing.value = true
  try {
    console.log('🔄 手动刷新数据...')

    // 智能刷新：只刷新当前页面相关的数据
    const refreshPromises = []

    if (currentProduct.value === 'accounts' || currentProduct.value === 'iphone') {
      refreshPromises.push(refreshTasks())
    }

    if (currentProduct.value === 'accounts') {
      refreshPromises.push(refreshAccounts())
    }

    if (currentProduct.value === 'gift-cards') {
      refreshPromises.push(refreshGiftCards())
    }

    // 如果没有特定页面，则刷新任务（默认页面）
    if (refreshPromises.length === 0) {
      refreshPromises.push(refreshTasks())
    }

    await Promise.all(refreshPromises)
    ElMessage.success('数据刷新完成')
  } catch (error) {
    console.error('手动刷新失败:', error)
    ElMessage.error('刷新失败')
  } finally {
    isRefreshing.value = false
  }
}

// ==================== 🚀 SOTA实时同步事件处理方法 ====================

const handleTaskStatusUpdate = (data) => {
  try {
    if (!data || !data.task_id) return

    const task = tasks.value.find(t => t && t.id === data.task_id)
    if (task) {
      // 直接更新，但只在真正改变时更新
      let hasChanges = false

      if (data.status && task.status !== data.status) {
        task.status = data.status
        hasChanges = true
      }

      if (data.progress !== undefined && task.progress !== data.progress) {
        task.progress = data.progress
        hasChanges = true
      }

      if (data.message && task.current_step !== data.message) {
        task.current_step = data.message
        hasChanges = true
      }

      if (hasChanges) {
        task.last_updated = new Date().toISOString()

        // 如果是当前查看的任务，也更新详情
        if (selectedTask.value && selectedTask.value.id === data.task_id) {
          selectedTask.value = { ...task }
        }

        console.log(`🔄 任务状态已更新: ${data.task_id} -> ${data.status || task.status}`)
      }
    }
  } catch (error) {
    console.error('处理任务状态更新错误:', error)
  }
}



const handleStepUpdate = (data) => {
  try {
    console.log('🔍 handleStepUpdate 开始处理:', data)

    if (!data || !data.task_id) {
      console.warn('⚠️ 步骤更新数据无效:', data)
      return
    }

    const task = tasks.value.find(t => t && t.id === data.task_id)
    console.log('🔍 找到任务:', task ? `${task.id.substring(0, 8)} (${task.status})` : '未找到')

    if (task) {
      let hasChanges = false
      console.log('🔍 当前任务状态:', {
        current_step: task.current_step,
        progress: task.progress,
        status: task.status
      })
      console.log('🔍 新的更新数据:', {
        step: data.step,
        progress: data.progress,
        status: data.status
      })

      if (data.step && task.current_step !== data.step) {
        console.log(`🔄 更新步骤: ${task.current_step} -> ${data.step}`)
        task.current_step = data.step
        hasChanges = true
      }

      if (data.progress !== undefined && task.progress !== data.progress) {
        console.log(`🔄 更新进度: ${task.progress} -> ${data.progress}`)
        task.progress = data.progress
        hasChanges = true
      }

      if (data.status && task.status !== data.status) {
        console.log(`🔄 更新状态: ${task.status} -> ${data.status}`)
        task.status = data.status
        hasChanges = true
      }

      if (hasChanges) {
        task.last_updated = new Date().toISOString()

        // 如果是当前查看的任务，也更新详情
        if (selectedTask.value && selectedTask.value.id === data.task_id) {
          selectedTask.value = { ...task }
          console.log('🔄 已更新选中任务详情')
        }

        console.log(`✅ 步骤已更新: ${data.task_id.substring(0, 8)} -> ${data.step || task.current_step} (进度: ${task.progress}%)`)
      } else {
        console.log('ℹ️ 没有变化，跳过更新')
      }
    } else {
      console.warn('⚠️ 未找到对应任务:', data.task_id)
    }
  } catch (error) {
    console.error('❌ 处理步骤更新错误:', error)
  }
}

const handleTaskLog = (data) => {
  try {
    if (!data || !data.task_id || !data.message) return

    const task = tasks.value.find(t => t && t.id === data.task_id)
    if (task) {
      // 确保日志数组存在
      if (!task.logs) {
        task.logs = []
      }

      // 添加新日志
      const logEntry = {
        level: data.level || 'info',
        message: data.message,
        timestamp: data.timestamp || new Date().toISOString()
      }
      task.logs.push(logEntry)

      // 限制日志数量，避免内存溢出
      if (task.logs.length > 1000) {
        task.logs = task.logs.slice(-500)
      }

      // 更新时间戳
      task.last_updated = new Date().toISOString()
      lastUpdateTime.value = Date.now() // 更新最后更新时间

      // 如果是当前查看的任务，也更新详情
      if (selectedTask.value && selectedTask.value.id === data.task_id) {
        selectedTask.value = { ...task }

        // 🚀 实时滚动到最新日志
        if (autoScrollLogs.value && logContainer.value) {
          // 使用nextTick确保DOM已更新
          nextTick(() => {
            const container = logContainer.value?.querySelector('.log-entries')
            if (container) {
              container.scrollTop = container.scrollHeight
            }
          })
        }
      }

      console.log(`📝 实时日志已追加: ${data.task_id} -> [${data.level}] ${data.message}`)
    }
  } catch (error) {
    console.error('处理任务日志错误:', error)
  }
}

const handleGiftCardInputRequired = (data) => {
  try {
    console.log('🎁 处理礼品卡输入请求:', data)
    if (!data || !data.task_id) {
      console.warn('⚠️ 无效的礼品卡输入请求数据')
      return
    }

    const task = tasks.value.find(t => t && t.id === data.task_id)
    if (task) {
      // 更新任务状态为等待礼品卡输入
      task.status = 'waiting_gift_card_input'
      task.current_step = 'waiting_gift_card_input'

      // 显示礼品卡输入提示（不自动打开对话框）
      ElMessage({
        type: 'info',
        message: `任务 "${task.config?.name}" 已到达礼品卡输入阶段，请在操作栏点击"填写卡号"按钮`,
        duration: 3000,
        showClose: true
      })

      console.log(`✅ 礼品卡输入请求已处理: ${data.task_id}`)
    } else {
      console.warn(`⚠️ 未找到任务: ${data.task_id}`)
    }
  } catch (error) {
    console.error('处理礼品卡输入请求错误:', error)
  }
}

// 🎁 检查是否有等待礼品卡输入的任务
const checkForWaitingGiftCardTasks = () => {
  try {
    console.log('🎁 检查等待礼品卡输入的任务...')
    const waitingTasks = tasks.value.filter(task =>
      task && task.status === 'waiting_gift_card_input'
    )

    if (waitingTasks.length > 0) {
      console.log(`🎁 发现 ${waitingTasks.length} 个等待礼品卡输入的任务`)

      // 只显示提示消息，不自动打开对话框
      ElMessage({
        type: 'info',
        message: `发现 ${waitingTasks.length} 个任务等待输入礼品卡，请在"所有任务"页签的操作栏点击"填写卡号"按钮`,
        duration: 5000,
        showClose: true
      })
    } else {
      console.log('🎁 没有等待礼品卡输入的任务')
    }
  } catch (error) {
    console.error('检查等待礼品卡输入任务错误:', error)
  }
}

const createTask = async () => {
  try {
    console.log('🚀 开始创建任务...')
    console.log('📝 当前表单状态:', {
      name: taskForm.name,
      selectedAccount: taskForm.selectedAccount,
      selectedModel: taskForm.selectedModel,
      selectedSize: taskForm.selectedSize,
      selectedStorage: taskForm.selectedStorage,
      selectedColor: taskForm.selectedColor,
      url: taskForm.url,
      generatedUrl: generatedUrl.value
    })

    console.log('📱 iPhone配置状态:', {
      modelsCount: Object.keys(iphoneConfigs.models).length,
      storageNamesCount: Object.keys(iphoneConfigs.storage_display_names).length,
      colorNamesCount: Object.keys(iphoneConfigs.color_display_names).length,
      models: iphoneConfigs.models,
      storageNames: iphoneConfigs.storage_display_names,
      colorNames: iphoneConfigs.color_display_names
    })

    // 验证表单
    if (!taskForm.name || !taskForm.selectedAccount || !taskForm.selectedModel || !taskForm.selectedSize || !taskForm.selectedStorage || !taskForm.selectedColor) {
      ElMessage.error('请填写所有必要信息（型号、尺寸、存储、颜色）')
      console.error('❌ 表单验证失败，缺少必要字段')
      return
    }

    // 获取显示名称
    const modelDisplayName = iphoneConfigs.models[taskForm.selectedModel]?.name || taskForm.selectedModel
    const sizeDisplayName = iphoneConfigs.models[taskForm.selectedModel]?.sizes[taskForm.selectedSize]?.name || taskForm.selectedSize
    const storageDisplayName = iphoneConfigs.storage_display_names[taskForm.selectedStorage] || taskForm.selectedStorage
    const colorDisplayName = iphoneConfigs.color_display_names[taskForm.selectedColor] || taskForm.selectedColor

    // 获取选中的账号信息
    const selectedAccount = accounts.value.find(acc => acc.id === taskForm.selectedAccount)
    if (!selectedAccount) {
      ElMessage.error('请选择Apple ID账号')
      return
    }

    // 调试：检查所有字段值
    console.log('🔍 表单数据检查:', {
      name: taskForm.name,
      url: generatedUrl.value || taskForm.url,
      selectedAccount: selectedAccount,
      selectedModel: taskForm.selectedModel,
      selectedSize: taskForm.selectedSize,
      selectedStorage: taskForm.selectedStorage,
      selectedColor: taskForm.selectedColor,
      modelDisplayName: modelDisplayName,
      sizeDisplayName: sizeDisplayName,
      storageDisplayName: storageDisplayName,
      colorDisplayName: colorDisplayName
    })

    // 按照原系统格式构建任务数据
    const taskData = {
      name: taskForm.name,
      url: generatedUrl.value || taskForm.url,
      account_config: {
        email: selectedAccount.email,
        password: selectedAccount.password,
        phone_number: selectedAccount.phone_number || '07700900000'
      },
      // 礼品卡数组为空 - 系统将在运行时弹出输入界面
      gift_cards: [],
      product_config: {
        model: sizeDisplayName, // 使用完整的尺寸名称（按原系统逻辑）
        storage: storageDisplayName,
        finish: colorDisplayName,
        trade_in: 'No trade-in',
        payment: 'Buy',
        apple_care: 'No AppleCare+ Coverage'
      },
      enabled: true,
      priority: taskForm.priority,
      use_proxy: false
    }

    console.log('📤 发送任务数据 (WebSocket):', taskData)

    // 使用WebSocket发送，而不是HTTP API
    if (socket.value && isConnected.value) {
      socket.value.emit('create_task', taskData)
      console.log('✅ 任务创建请求已通过WebSocket发送')

      // 设置超时处理
      setTimeout(() => {
        console.log('⏰ 检查任务创建是否完成')
      }, 5000)
    } else {
      // 如果WebSocket未连接，尝试HTTP API作为降级
      console.log('� WebSocket未连接，尝试HTTP API')
      const response = await axios.post('http://localhost:5001/api/tasks', taskData)
      console.log('✅ 任务创建响应 (HTTP):', response.data)
    }

    // 注意：不在这里显示成功消息，因为WebSocket事件会处理
    // ElMessage.success('任务创建成功')
    showCreateDialog.value = false

    // 重置表单
    Object.assign(taskForm, {
      name: '',
      url: '',
      selectedAccount: null,
      selectedGiftCards: [],
      selectedModel: '',
      selectedSize: '',
      selectedStorage: '',
      selectedColor: '',
      priority: 2,
      product: 'iphone'
    })
    generatedUrl.value = ''

    console.log('⏳ 等待WebSocket事件添加任务到列表...')

    // 如果WebSocket没有连接，则手动添加任务
    if (!isConnected.value) {
      console.log('� WebSocket未连接，手动添加任务到列表')
      const newTask = response.data
      if (newTask && newTask.id) {
        const existingIndex = tasks.value.findIndex(t => t.id === newTask.id)
        if (existingIndex === -1) {
          tasks.value.push(newTask)
          ElMessage.success(`任务创建成功: ${newTask.config?.name}`)
        }
      }
    }
  } catch (error) {
    console.error('创建任务失败:', error)
    ElMessage.error('创建任务失败: ' + (error.response?.data?.message || error.message))
  }
}

// 🚀 页签和分页相关方法
const handleTabClick = (tab) => {
  console.log('🔄 切换页签:', tab.name)
  // WebSocket实时同步，无需切换页签时刷新
}

const handleSizeChange = (size) => {
  pageSize.value = size
  currentPage.value = 1
}

const handleCurrentChange = (page) => {
  currentPage.value = page
}

const getProgressStatus = (status) => {
  switch (status) {
    case 'completed':
      return 'success'
    case 'failed':
      return 'exception'
    case 'running':
      return undefined // 默认蓝色
    default:
      return undefined
  }
}

// 🚀 更新任务统计
const updateTaskStats = () => {
  const stats = taskStatsComputed.value
  Object.assign(taskStats.value, stats)
}

// 🚀 监听任务变化，自动更新统计
watch(tasks, () => {
  updateTaskStats()
}, { deep: true })

// 🚀 页签切换方法
const switchTab = (tabKey) => {
  console.log('🔄 切换页签:', tabKey)
  // 这里可以添加页签切换的逻辑
}

// 方法
const switchProduct = (productKey) => {
  console.log('🔄 切换产品页面:', productKey)
  console.log('🔄 当前产品 (切换前):', currentProduct.value)

  // 强制更新 currentProduct
  currentProduct.value = productKey

  console.log('🔄 当前产品 (切换后):', currentProduct.value)

  // 根据页面类型显示不同消息
  const productMap = {
    'iphone': 'iPhone',
    'mac': 'Mac',
    'ipad': 'iPad',
    'watch': 'Apple Watch',
    'all-tasks': '所有任务',
    'accounts': '账号管理',
    'gift-cards': '礼品卡管理',
    'ip-pool': 'IP池管理'
  }

  // 🚀 优化：只在真正需要时才加载数据，避免频繁刷新
  if (productKey === 'accounts' && accounts.value.length === 0) {
    console.log('📡 账号页面数据为空，加载数据...')
    refreshAccounts()
  } else if (productKey === 'gift-cards' && giftCards.value.length === 0) {
    console.log('📡 礼品卡页面数据为空，加载数据...')
    refreshGiftCards()
  } else {
    console.log('📋 数据已存在，跳过加载')
  }

  ElMessage.success(`已切换到 ${productMap[productKey]} 页面`)

  // 强制重新渲染（如果需要的话）
  console.log('✅ 页面切换完成，当前页面:', productKey)
}

// 生命周期钩子
onMounted(() => {
  console.log('🚀 应用启动中...')

  // 初始化空的数据列表
  tasks.value = []
  accounts.value = []
  giftCards.value = []

  initWebSocket()

  // 加载真实数据
  console.log('📡 开始加载后端数据...')
  refreshAccounts()
  refreshGiftCards()

  // 加载iPhone配置
  console.log('📱 加载iPhone配置...')
  loadIphoneConfigs()

  // 任务列表将在WebSocket连接成功时加载

  // 🚀 启动实时监控检查
  console.log('🔄 启动实时监控系统')
  startRealTimeMonitoring()
})

onUnmounted(() => {
  if (socket.value) {
    socket.value.disconnect()
  }

  // 🚀 清理智能轮询
  stopSmartPolling()

  if (heartbeatTimer) {
    clearInterval(heartbeatTimer)
  }
})
</script>

<style scoped>
.header {
  background: #fff;
  border-bottom: 1px solid #e4e7ed;
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 0 20px;
}

.header-left h2 {
  margin: 0;
  color: #2c3e50;
  font-weight: 600;
}

.header-right {
  display: flex;
  align-items: center;
  gap: 15px;
}

.sidebar {
  background: #fff;
  border-right: 1px solid #e4e7ed;
}

.menu {
  border: none;
  height: 100%;
}

.main-content {
  background: #f5f7fa;
  padding: 20px;
}

.product-section {
  background: #fff;
  border-radius: 8px;
  padding: 20px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

.section-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 20px;
  padding-bottom: 15px;
  border-bottom: 2px solid #e4e7ed;
}

.section-header h2 {
  margin: 0;
  color: #2c3e50;
  font-weight: 600;
  font-size: 24px;
}

.header-actions {
  display: flex;
  gap: 10px;
  align-items: center;
}

.status-indicators {
  display: flex;
  align-items: center;
  gap: 10px;
  margin-right: 15px;
}

.stats-row {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
  gap: 20px;
  margin-bottom: 30px;
}

.stat-card {
  text-align: center;
}

.stat-content {
  padding: 10px;
}

.stat-number {
  font-size: 32px;
  font-weight: bold;
  color: #409eff;
  margin-bottom: 5px;
}

.stat-label {
  color: #666;
  font-size: 14px;
}

.tasks-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
  gap: 20px;
  margin-top: 20px;
}

.task-card {
  border-radius: 8px;
  transition: transform 0.2s;
}

.task-card:hover {
  transform: translateY(-2px);
}

.card-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.task-name {
  font-weight: 600;
  color: #2c3e50;
}

.task-details p {
  margin: 8px 0;
  color: #666;
  font-size: 14px;
}

.task-actions {
  display: flex;
  gap: 8px;
  margin-top: 15px;
  flex-wrap: wrap;
}

.current-step {
  margin: 10px 0;
  padding: 8px;
  background: #f0f9ff;
  border-radius: 4px;
  border-left: 3px solid #409eff;
}

.latest-log {
  margin: 10px 0;
  padding: 8px;
  background: #f9f9f9;
  border-radius: 4px;
  border-left: 3px solid #909399;
}

.log-text {
  margin: 0;
  font-size: 12px;
  color: #666;
  line-height: 1.4;
}

/* 任务详情对话框样式 */
.log-container {
  max-height: 300px;
  overflow-y: auto;
  border: 1px solid #e4e7ed;
  border-radius: 4px;
  background: #fafafa;
}

.log-entries {
  padding: 10px;
}

.log-entry {
  display: flex;
  margin-bottom: 8px;
  padding: 6px 8px;
  border-radius: 4px;
  font-size: 12px;
  line-height: 1.4;
}

.log-entry.info {
  background: #f0f9ff;
  border-left: 3px solid #409eff;
}

.log-entry.success {
  background: #f0f9f0;
  border-left: 3px solid #67c23a;
}

.log-entry.warning {
  background: #fdf6ec;
  border-left: 3px solid #e6a23c;
}

.log-entry.error {
  background: #fef0f0;
  border-left: 3px solid #f56c6c;
}

.log-time {
  color: #909399;
  margin-right: 10px;
  white-space: nowrap;
  min-width: 120px;
}

.log-message {
  color: #303133;
  flex: 1;
  word-break: break-word;
}

.no-logs {
  padding: 20px;
  text-align: center;
  color: #909399;
  font-style: italic;
}

/* 🚀 SOTA实时同步样式 */
.gift-card-waiting {
  margin: 10px 0;
}

.log-time {
  margin: 0;
  font-size: 10px;
  color: #909399;
  text-align: right;
}

.log-error {
  color: #f56c6c;
}

.log-warning {
  color: #e6a23c;
}

.log-success {
  color: #67c23a;
}

.log-info {
  color: #409eff;
}

/* 实时更新动画 */
.task-card {
  transition: all 0.3s ease;
}

.task-card:hover {
  transform: translateY(-2px);
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
}

/* 移除过度的动画效果，保持界面稳定 */
.current-step {
  background-color: #f0f9ff;
  transition: background-color 0.3s ease;
}

/* 🚀 SOTA实时同步状态样式 */
.sync-status {
  display: flex;
  align-items: center;
  gap: 4px;
  padding: 4px 8px;
  background: linear-gradient(45deg, #67c23a, #85ce61);
  border-radius: 12px;
  color: white;
  font-size: 12px;
  font-weight: 500;
}

.sync-indicator {
  animation: spin 3s linear infinite;
}

@keyframes spin {
  from { transform: rotate(0deg); }
  to { transform: rotate(360deg); }
}

.sync-text {
  white-space: nowrap;
}

.polling-status {
  display: flex;
  align-items: center;
  gap: 4px;
  padding: 4px 8px;
  background: linear-gradient(45deg, #409eff, #66b1ff);
  border-radius: 12px;
  color: white;
  font-size: 12px;
  font-weight: 500;
}

.polling-indicator {
  animation: pulse 2s ease-in-out infinite;
}

@keyframes pulse {
  0%, 100% { opacity: 1; }
  50% { opacity: 0.6; }
}

.polling-text {
  white-space: nowrap;
}

.active-tasks {
  display: flex;
  align-items: center;
  gap: 4px;
  padding: 4px 8px;
  background: linear-gradient(45deg, #e6a23c, #f7ba2a);
  border-radius: 12px;
  color: white;
  font-size: 12px;
  font-weight: 500;
}

.active-indicator {
  animation: flash 1s ease-in-out infinite alternate;
}

@keyframes flash {
  from { opacity: 1; }
  to { opacity: 0.5; }
}

.active-text {
  white-space: nowrap;
}

/* 🚀 任务列表页签样式 */
.task-tabs {
  margin-top: 20px;
}

.task-list-content {
  padding: 20px 0;
}

.search-filter-bar {
  margin-bottom: 20px;
  padding: 16px;
  background: #f8f9fa;
  border-radius: 8px;
}

.filter-info {
  display: flex;
  align-items: center;
  justify-content: space-between;
  gap: 10px;
}

.task-name-cell {
  display: flex;
  flex-direction: column;
  gap: 4px;
}

.task-name {
  font-weight: 500;
  color: #303133;
}

.task-id {
  font-family: monospace;
  font-size: 11px;
  background: #f0f0f0;
  color: #666;
}

.text-muted {
  color: #909399;
}

.task-row {
  cursor: pointer;
}

.task-row:hover {
  background-color: #f5f7fa;
}

.pagination-wrapper {
  margin-top: 20px;
  display: flex;
  justify-content: center;
}

/* 状态标签颜色 */
.el-tag.el-tag--pending {
  background-color: #f4f4f5;
  color: #909399;
  border-color: #e4e7ed;
}

.el-tag.el-tag--running {
  background-color: #ecf5ff;
  color: #409eff;
  border-color: #b3d8ff;
}

.el-tag.el-tag--completed {
  background-color: #f0f9ff;
  color: #67c23a;
  border-color: #c2e7b0;
}

.el-tag.el-tag--failed {
  background-color: #fef0f0;
  color: #f56c6c;
  border-color: #fbc4c4;
}

.el-tag.el-tag--cancelled {
  background-color: #fdf6ec;
  color: #e6a23c;
  border-color: #f5dab1;
}

/* 进度条样式 */
.el-progress--line {
  margin-bottom: 0;
}

.el-progress-bar__outer {
  border-radius: 4px;
}

.el-progress-bar__inner {
  border-radius: 4px;
}

/* 🚀 所有任务页签样式 */
.tasks-table {
  margin-top: 20px;
}

.progress-text {
  font-size: 12px;
  margin-left: 8px;
  color: #666;
}

.task-count {
  font-size: 12px;
  opacity: 0.8;
  margin-left: 4px;
}

/* 🎁 礼品卡输入表单样式 */
.gift-card-form {
  padding: 10px 0;
}

.form-help-text {
  margin-top: 4px;
}

.form-help-text small {
  color: #909399;
  font-size: 12px;
}
</style>
